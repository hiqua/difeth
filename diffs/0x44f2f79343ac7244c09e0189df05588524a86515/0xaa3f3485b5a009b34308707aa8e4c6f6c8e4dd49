--- 
+++ 
@@ -20,7 +20,7 @@
   Estimated Time of Distribution: 3-5 weeks from ICO according to TenX
   Cut-off Time: ~ August 9, 2017
 
-  Greetz: blast, cintix
+  Greetz: blast
   foobarbizarre@gmail.com (Please report any findings or suggestions for a 1 ETH bounty!)
 
   Thank you
@@ -39,7 +39,7 @@
   mapping (address => uint256) public eth_sent;
 
   // Total IOUs available to sell
-  uint256 public total_iou_available = 20000000000000000000;
+  uint256 public total_iou_available = 52500000000000000000000;
 
   // Total IOUs purchased by all buyers
   uint256 public total_iou_purchased;
@@ -48,23 +48,24 @@
   uint256 public total_iou_withdrawn;
 
   // IOU per ETH (price)
-  uint256 public price_per_eth = 8600;
+  uint256 public price_per_eth = 160;
 
   //  PAY token contract address (IOU offering)
-  ERC20 public token = ERC20(0x0D8775F648430679A709E98d2b0Cb6250d2887EF);
+  ERC20 public token = ERC20(0xB97048628DB6B661D4C2aA833e95Dbe1A905B280);
 
   // The seller's address (to receive ETH upon distribution, and for authing safeties)
-  address seller = 0x007937cd579875A1b9e4E485a49Ee8147BC03a37;
+  address seller = 0xB00Ae1e677B27Eee9955d632FF07a8590210B366;
 
   // Halt further purchase ability just in case
   bool public halt_purchases;
 
+  modifier pwner() { if(msg.sender != seller) throw; _; }
+
   /*
     Safety to withdraw unbought tokens back to seller. Ensures the amount
     that buyers still need to withdraw remains available
   */
-  function withdrawTokens() {
-    if(msg.sender != seller) throw;
+  function withdrawTokens() pwner {
     token.transfer(seller, token.balanceOf(address(this)) - (total_iou_purchased - total_iou_withdrawn));
   }
 
@@ -72,21 +73,18 @@
     Safety to prevent anymore purchases/sales from occurring in the event of
     unforeseen issue. Buyer withdrawals still remain enabled.
   */
-  function haltPurchases() {
-    if(msg.sender != seller) throw;
+  function haltPurchases() pwner {
     halt_purchases = true;
   }
 
-  function resumePurchases() {
-    if(msg.sender != seller) throw;
+  function resumePurchases() pwner {
     halt_purchases = false;
   }
 
   /*
     Update available IOU to purchase
   */
-  function updateAvailability(uint256 _iou_amount) {
-    if(msg.sender != seller) throw;
+  function updateAvailability(uint256 _iou_amount) pwner {
     if(_iou_amount < total_iou_purchased) throw;
 
     total_iou_available = _iou_amount;
@@ -95,8 +93,7 @@
   /*
     Update IOU price
   */
-  function updatePrice(uint256 _price) {
-    if(msg.sender != seller) throw;
+  function updatePrice(uint256 _price) pwner {
     price_per_eth = _price;
   }
 
@@ -105,13 +102,11 @@
     is >= to the amount that still needs to be withdrawn. Protects buyer.
 
     The seller must call this function manually after depositing the adequate
-    amount of tokens for all buyers to collect, as defined by total_iou_purchased
-
-    This effectively ends the sale, but withdrawals remain open indefinitely
-  */
-  function paySeller() {
-    if(msg.sender != seller) throw;
-
+    amount of tokens for all buyers to collect
+
+    This effectively ends the sale, but withdrawals remain open
+  */
+  function paySeller() pwner {
     // not enough tokens in balance to release ETH, protect buyer and abort
     if(token.balanceOf(address(this)) < (total_iou_purchased - total_iou_withdrawn)) throw;
 
@@ -162,13 +157,13 @@
 
     /*
       Check if there is an adequate amount of tokens in the contract yet
-      and allow the buyer to withdraw tokens and release ETH to the seller if so
+      and allow the buyer to withdraw tokens
     */
     if(token.balanceOf(address(this)) == 0 || iou_purchased[msg.sender] > token.balanceOf(address(this))) throw;
 
     uint256 iou_to_withdraw = iou_purchased[msg.sender];
 
-    // If the user doesn't have any IOUs to withdraw/release, get out ASAP
+    // If the user doesn't have any IOUs to withdraw, get out ASAP
     if(iou_to_withdraw == 0) throw;
 
     // Clear record of buyer's IOU and ETH balance before transferring out
@@ -183,9 +178,10 @@
 
   function purchase() payable {
     if(halt_purchases) throw;
+    if(msg.value == 0) throw;
 
     // Determine amount of tokens user wants to/can buy
-    uint256 iou_to_purchase = price_per_eth * msg.value; // price is 160 per ETH
+    uint256 iou_to_purchase = price_per_eth * msg.value;
 
     // Check if we have enough IOUs left to sell
     if((total_iou_purchased + iou_to_purchase) > total_iou_available) throw;
