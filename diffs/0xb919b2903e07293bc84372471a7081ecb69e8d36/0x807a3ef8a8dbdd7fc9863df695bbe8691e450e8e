--- 
+++ 
@@ -1,5 +1,3 @@
-pragma solidity ^0.4.8;
-
 // <ORACLIZE_API>
 /*
 Copyright (c) 2015-2016 Oraclize SRL
@@ -311,6 +309,8 @@
 
 }
 // </ORACLIZE_API>
+
+
 
 library strings {
     struct slice {
@@ -1050,7 +1050,7 @@
 	event newPurchase(address player, uint8 animalType, uint8 amount, uint32 startId);
 	/** is fired when a player leaves the game */
 	event newExit(address player, uint256 totalBalance);
-	/** is fired when an attack occures*/
+	/** is fired when an attack occures */
 	event newAttack(uint32[] killedAnimals);
 
 
@@ -1064,8 +1064,6 @@
 			values.push(costs[i] - costs[i] / 100 * fee);
 		}
 		maxAnimals = 300;
-		/*randomQuery = "https://www.random.org/integers/?num=10&min=0&max=10000&col=1&base=10&format=plain&rnd=new";
-		queryType = "URL";*/
 		randomQuery = "10 random numbers between 1 and 1000";
 		queryType = "WolframAlpha";
 		oraclizeGas = 400000;
@@ -1093,28 +1091,36 @@
 	 *  as many animals as possible are bought with msg.value
 	 */
 	function addAnimals(uint8 animalType) payable {
+		giveAnimals(animalType, msg.sender);
+	}
+	
+	/** buy animals of a given type forsomeone else
+	 *  as many animals as possible are bought with msg.value
+	 */
+	function giveAnimals(uint8 animalType, address receiver) payable {
 		uint8 amount = uint8(msg.value / costs[animalType]);
 		if (animalType >= costs.length || msg.value < costs[animalType] ||  numAnimals + amount >= maxAnimals) throw;
 		//if type exists, enough ether was transferred and there are less than maxAnimals animals in the game
 		for (uint8 j = 0; j < amount; j++) {
-			addAnimal(animalType);
+			addAnimal(animalType, receiver);
 		}
 		numAnimalsXType[animalType] += amount;
-		newPurchase(msg.sender, animalType, amount, nextId-amount);
+		newPurchase(receiver, animalType, amount, nextId-amount);
 	}
 
 	/**
 	 *  adds a single animal of the given type
 	 */
-	function addAnimal(uint8 animalType) internal {
+	function addAnimal(uint8 animalType, address receiver) internal {
 		if (numAnimals < ids.length)
 			ids[numAnimals] = nextId;
 		else
 			ids.push(nextId);
-		animals[nextId] = Animal(animalType, values[animalType], msg.sender);
+		animals[nextId] = Animal(animalType, values[animalType], receiver);
 		nextId++;
 		numAnimals++;
 	}
+	
 
 
 	/** leave the game
@@ -1239,12 +1245,12 @@
 
 
 	/** distributes the given amount among the surviving fishes*/
-	function distribute(uint128 amount) internal {
+	function distribute(uint128 totalAmount) internal {
 		//pay 10% to the oldest fish
 		if (oldest == 0)
 			findOldest();
-		animals[oldest].value += amount / 10;
-		amount = amount / 10 * 9;
+		animals[oldest].value += totalAmount / 10;
+		uint128 amount = totalAmount / 10 * 9;
 		//distribute the rest according to their type
 		uint128 valueSum;
 		uint128[] memory shares = new uint128[](values.length);
@@ -1253,10 +1259,8 @@
 		}
 		for (uint8 m = 0; m < values.length; m++) {
 		    if(numAnimalsXType[m] > 0)
-			    shares[m] = amount / valueSum * values[m] / numAnimalsXType[m];
+			    shares[m] =  amount * values[m] / valueSum / numAnimalsXType[m];
 		}
-		
-
 		for (uint16 i = 0; i < numAnimals; i++) {
 			animals[ids[i]].value += shares[animals[ids[i]].animalType];
 		}
