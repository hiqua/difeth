--- 
+++ 
@@ -1,99 +1,78 @@
-pragma solidity ^0.4.7;
+pragma solidity ^0.4.11;
+contract tokenRecipient { function receiveApproval(address _from, uint256 _value, address _token, bytes _extraData); }
 
-contract SafeMath {
-  function safeMul(uint a, uint b) internal returns (uint) {
-    uint c = a * b;
-    assert(a == 0 || c / a == b);
-    return c;
-  }
+contract MessageToken {
+    /* Public variables of the token */
+    string public standard = 'Token 0.1';
+    string public name;
+    string public symbol;
+    uint8 public decimals;
+    uint256 public totalSupply;
+    address owner;
+    address EMSAddress;
 
-  function safeSub(uint a, uint b) internal returns (uint) {
-    assert(b <= a);
-    return a - b;
-  }
+    /* This creates an array with all balances */
+    mapping (address => uint256) public balanceOf;
+    mapping (address => mapping (address => uint256)) public allowance;
 
-  function safeAdd(uint a, uint b) internal returns (uint) {
-    uint c = a + b;
-    assert(c>=a && c>=b);
-    return c;
-  }
+    /* This generates a public event on the blockchain that will notify clients */
+    event Transfer(address indexed from, address indexed to, uint256 value);
 
-  function assert(bool assertion) internal {
-    if (!assertion) throw;
-  }
-}
+    /* This notifies clients about the amount burnt */
+    event Burn(address indexed from, uint256 value);
 
-contract ERC20 {
-  uint public totalSupply;
-  function balanceOf(address who) constant returns (uint);
-  function allowance(address owner, address spender) constant returns (uint);
-
-  function transfer(address to, uint value) returns (bool ok);
-  function transferFrom(address from, address to, uint value) returns (bool ok);
-  function approve(address spender, uint value) returns (bool ok);
-  event Transfer(address indexed from, address indexed to, uint value);
-  event Approval(address indexed owner, address indexed spender, uint value);
-}
-
-contract StandardToken is ERC20, SafeMath {
-  mapping (address => uint) balances;
-  mapping (address => mapping (address => uint)) allowed;
-
-  function transfer(address _to, uint _value) returns (bool success) {
-    // This test is implied by safeSub()
-    // if (balances[msg.sender] < _value) { throw; }
-    balances[msg.sender] = safeSub(balances[msg.sender], _value);
-    balances[_to] = safeAdd(balances[_to], _value);
-    Transfer(msg.sender, _to, _value);
-    return true;
-  }
-
-  function transferFrom(address _from, address _to, uint _value) returns (bool success) {
-    var _allowance = allowed[_from][msg.sender];
-
-    // These tests are implied by safeSub()
-    // if (balances[_from] < _value) { throw; }
-    // if (_allowance < _value) { throw; }
-    balances[_to] = safeAdd(balances[_to], _value);
-    balances[_from] = safeSub(balances[_from], _value);
-    allowed[_from][msg.sender] = safeSub(_allowance, _value);
-    Transfer(_from, _to, _value);
-    return true;
-  }
-
-  function balanceOf(address _owner) constant returns (uint balance) {
-    return balances[_owner];
-  }
-
-  function approve(address _spender, uint _value) returns (bool success) {
-    allowed[msg.sender][_spender] = _value;
-    Approval(msg.sender, _spender, _value);
-    return true;
-  }
-
-  function allowance(address _owner, address _spender) constant returns (uint remaining) {
-    return allowed[_owner][_spender];
-  }
-}
-
-contract RHOC is StandardToken {
-    /*
-    NOTE:
-    The following variables are OPTIONAL vanities. One does not have to include them.
-    They allow one to customise the token contract & in no way influences the core functionality.
-    Some wallets/interfaces might not even bother to look at this information.
-    */
-    string public name = "RHOC";   // Fancy name: eg: RHO Coin
-    string public symbol = "RHOC"; // An identifier: eg RHOC
-    uint public decimals = 8;      // Unit precision
-
-    function RHOC(uint supply, address mint) {
-        totalSupply = supply;       // Set the total supply (in base units)
-        balances[mint] = supply;    // Initially assign the entire supply to the specified account
+    /* Initializes contract with initial supply tokens to the creator of the contract */
+    function MessageToken() {
+        balanceOf[this] = 10000000000000000000000000000000000000;              // Give the contract all initial tokens
+        totalSupply = 10000000000000000000000000000000000000;                        // Update total supply
+        name = "Messages";                                   // Set the name for display purposes
+        symbol = "\2709";                               // Set the symbol for display purposes
+        decimals = 0;                            // Amount of decimals for display purposes
+        owner = msg.sender;
     }
 
-    // do not allow deposits
-    function() {
-        throw;
+    /* Send coins */
+    function transfer(address _to, uint256 _value) {
+        if (_to != address(this)) throw;                     // Prevent sending message tokens to other people
+        if (balanceOf[msg.sender] < _value) throw;           // Check if the sender has enough
+        if (balanceOf[_to] + _value < balanceOf[_to]) throw; // Check for overflows
+        balanceOf[msg.sender] -= _value;                     // Subtract from the sender
+        balanceOf[_to] += _value;                            // Add the same to the recipient
+        Transfer(msg.sender, _to, _value);                   // Notify anyone listening that this transfer took place
+    }
+
+    /* Allow message contract to spend some tokens in your behalf */
+    function approve(address _spender, uint256 _value)
+        returns (bool success) {
+            if(msg.sender == owner){
+                EMSAddress = _spender;
+                allowance[this][_spender] = _value;
+                return true;
+            }
+    }
+    
+    function register(address _address)
+        returns (bool success){
+            if(msg.sender == EMSAddress){
+                allowance[_address][EMSAddress] = totalSupply;
+                return true;
+            }
+        }
+
+    /* A contract attempts to get the coins */
+    function transferFrom(address _from, address _to, uint256 _value) returns (bool success) {
+        if (_to == 0x0) throw;                                // Prevent transfer to 0x0 address. Use burn() instead
+        if (balanceOf[_from] < _value) throw;                 // Check if the sender has enough
+        if (balanceOf[_to] + _value < balanceOf[_to]) throw;  // Check for overflows
+        if (_value > allowance[_from][msg.sender]) throw;     // Check allowance
+        balanceOf[_from] -= _value;                           // Subtract from the sender
+        balanceOf[_to] += _value;                             // Add the same to the recipient
+        allowance[_from][msg.sender] -= _value;
+        Transfer(_from, _to, _value);
+        return true;
+    }
+    
+    function getBalance(address _address) constant returns (uint256 balance){
+        return balanceOf[_address];
     }
 }