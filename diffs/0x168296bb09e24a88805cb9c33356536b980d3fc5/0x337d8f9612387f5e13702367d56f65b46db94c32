--- 
+++ 
@@ -1,99 +1,126 @@
-pragma solidity ^0.4.7;
+pragma solidity ^0.4.8;
+  
+ // ----------------------------------------------------------------------------------------------
+ // Sample fixed supply token contract
+ // Enjoy. (c) BokkyPooBah 2017. The MIT Licence.
+ // ----------------------------------------------------------------------------------------------
+  
+ // ERC Token Standard #20 Interface
+ // https://github.com/ethereum/EIPs/issues/20
+contract ERC20Interface {
+    // Get the total token supply
+    function totalSupply() constant returns (uint256 totalSupply);
+ 
+    // Get the account balance of another account with address _owner
+    function balanceOf(address _owner) constant returns (uint256 balance);
+ 
+    // Send _value amount of tokens to address _to
+    function transfer(address _to, uint256 _value) returns (bool success);
+ 
+    // Send _value amount of tokens from address _from to address _to
+    function transferFrom(address _from, address _to, uint256 _value) returns (bool success);
+ 
+    // Allow _spender to withdraw from your account, multiple times, up to the _value amount.
+    // If this function is called again it overwrites the current allowance with _value.
+    // this function is required for some DEX functionality
+    function approve(address _spender, uint256 _value) returns (bool success);
+ 
+    // Returns the amount which _spender is still allowed to withdraw from _owner
+    function allowance(address _owner, address _spender) constant returns (uint256 remaining);
+ 
+    // Triggered when tokens are transferred.
+    event Transfer(address indexed _from, address indexed _to, uint256 _value);
+ 
+    // Triggered whenever approve(address _spender, uint256 _value) is called.
+    event Approval(address indexed _owner, address indexed _spender, uint256 _value);
+}
+ 
+contract FixedSupplyToken is ERC20Interface {
+    string public constant symbol = "FUT";
+    string public constant name = "FU Token v2";
+    uint8 public constant decimals = 18;
+    uint256 _totalSupply = 1000000000000000000000000;
+    
+    // Owner of this contract
+    address public owner;
+ 
+    // Balances for each account
+    mapping(address => uint256) balances;
+ 
+    // Owner of account approves the transfer of an amount to another account
+    mapping(address => mapping (address => uint256)) allowed;
+ 
+    // Functions with this modifier can only be executed by the owner
+    modifier onlyOwner() {
+        if (msg.sender != owner) {
+            throw;
+        }
+        _;
+    }
+ 
+    // Constructor
+    function FixedSupplyToken() {
+        owner = msg.sender;
+        balances[owner] = _totalSupply;
+    }
+ 
+    function totalSupply() constant returns (uint256 totalSupply) {
+        totalSupply = _totalSupply;
+    }
+ 
+    // What is the balance of a particular account?
+    function balanceOf(address _owner) constant returns (uint256 balance) {
+        return balances[_owner];
+    }
+ 
+    // Transfer the balance from owner's account to another account
+    function transfer(address _to, uint256 _amount) returns (bool success) {
+        if (balances[msg.sender] >= _amount 
+            && _amount > 0
+            && balances[_to] + _amount > balances[_to]) {
+            balances[msg.sender] -= _amount;
+            balances[_to] += _amount;
+            Transfer(msg.sender, _to, _amount);
+            return true;
+        } else {
+            return false;
+        }
+    }
+ 
+    // Send _value amount of tokens from address _from to address _to
+    // The transferFrom method is used for a withdraw workflow, allowing contracts to send
+    // tokens on your behalf, for example to "deposit" to a contract address and/or to charge
+    // fees in sub-currencies; the command should fail unless the _from account has
+    // deliberately authorized the sender of the message via some mechanism; we propose
+    // these standardized APIs for approval:
+    function transferFrom(
+        address _from,
+        address _to,
+        uint256 _amount
+   ) returns (bool success) {
+       if (balances[_from] >= _amount
+           && allowed[_from][msg.sender] >= _amount
+           && _amount > 0
+           && balances[_to] + _amount > balances[_to]) {
+           balances[_from] -= _amount;
+           allowed[_from][msg.sender] -= _amount;
+           balances[_to] += _amount;
+           Transfer(_from, _to, _amount);
+           return true;
+       } else {
+           return false;
+       }
+   }
 
-contract SafeMath {
-  function safeMul(uint a, uint b) internal returns (uint) {
-    uint c = a * b;
-    assert(a == 0 || c / a == b);
-    return c;
-  }
+   // Allow _spender to withdraw from your account, multiple times, up to the _value amount.
+   // If this function is called again it overwrites the current allowance with _value.
+   function approve(address _spender, uint256 _amount) returns (bool success) {
+       allowed[msg.sender][_spender] = _amount;
+       Approval(msg.sender, _spender, _amount);
+       return true;
+   }
 
-  function safeSub(uint a, uint b) internal returns (uint) {
-    assert(b <= a);
-    return a - b;
-  }
-
-  function safeAdd(uint a, uint b) internal returns (uint) {
-    uint c = a + b;
-    assert(c>=a && c>=b);
-    return c;
-  }
-
-  function assert(bool assertion) internal {
-    if (!assertion) throw;
-  }
-}
-
-contract ERC20 {
-  uint public totalSupply;
-  function balanceOf(address who) constant returns (uint);
-  function allowance(address owner, address spender) constant returns (uint);
-
-  function transfer(address to, uint value) returns (bool ok);
-  function transferFrom(address from, address to, uint value) returns (bool ok);
-  function approve(address spender, uint value) returns (bool ok);
-  event Transfer(address indexed from, address indexed to, uint value);
-  event Approval(address indexed owner, address indexed spender, uint value);
-}
-
-contract StandardToken is ERC20, SafeMath {
-  mapping (address => uint) balances;
-  mapping (address => mapping (address => uint)) allowed;
-
-  function transfer(address _to, uint _value) returns (bool success) {
-    // This test is implied by safeSub()
-    // if (balances[msg.sender] < _value) { throw; }
-    balances[msg.sender] = safeSub(balances[msg.sender], _value);
-    balances[_to] = safeAdd(balances[_to], _value);
-    Transfer(msg.sender, _to, _value);
-    return true;
-  }
-
-  function transferFrom(address _from, address _to, uint _value) returns (bool success) {
-    var _allowance = allowed[_from][msg.sender];
-
-    // These tests are implied by safeSub()
-    // if (balances[_from] < _value) { throw; }
-    // if (_allowance < _value) { throw; }
-    balances[_to] = safeAdd(balances[_to], _value);
-    balances[_from] = safeSub(balances[_from], _value);
-    allowed[_from][msg.sender] = safeSub(_allowance, _value);
-    Transfer(_from, _to, _value);
-    return true;
-  }
-
-  function balanceOf(address _owner) constant returns (uint balance) {
-    return balances[_owner];
-  }
-
-  function approve(address _spender, uint _value) returns (bool success) {
-    allowed[msg.sender][_spender] = _value;
-    Approval(msg.sender, _spender, _value);
-    return true;
-  }
-
-  function allowance(address _owner, address _spender) constant returns (uint remaining) {
-    return allowed[_owner][_spender];
-  }
-}
-
-contract RHOC is StandardToken {
-    /*
-    NOTE:
-    The following variables are OPTIONAL vanities. One does not have to include them.
-    They allow one to customise the token contract & in no way influences the core functionality.
-    Some wallets/interfaces might not even bother to look at this information.
-    */
-    string public name = "RHOC";   // Fancy name: eg: RHO Coin
-    string public symbol = "RHOC"; // An identifier: eg RHOC
-    uint public decimals = 8;      // Unit precision
-
-    function RHOC(uint supply, address mint) {
-        totalSupply = supply;       // Set the total supply (in base units)
-        balances[mint] = supply;    // Initially assign the entire supply to the specified account
-    }
-
-    // do not allow deposits
-    function() {
-        throw;
-    }
+   function allowance(address _owner, address _spender) constant returns (uint256 remaining) {
+       return allowed[_owner][_spender];
+   }
 }