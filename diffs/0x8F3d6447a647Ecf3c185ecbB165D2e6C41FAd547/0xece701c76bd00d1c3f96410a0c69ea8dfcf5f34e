--- 
+++ 
@@ -1322,11 +1322,14 @@
     uint public houseEdge;     
     uint public maxProfit;   
     uint public maxProfitAsPercentOfHouse;                    
-    uint public minBet;       
-    int public totalBets;
+    uint public minBet; 
+    //init dicontinued contract data          
+    int public totalBets = 5671;
     uint public maxPendingPayouts;
-    uint public totalWeiWon;
-    uint public totalWeiWagered;    
+    //init dicontinued contract data      
+    uint public totalWeiWon = 2091633232860934129948;
+    //init dicontinued contract data  
+    uint public totalWeiWagered = 10852397031892670514693;    
 
     /*
      * player vars
@@ -1335,14 +1338,12 @@
     mapping (bytes32 => address) playerTempAddress;
     mapping (bytes32 => bytes32) playerBetId;
     mapping (bytes32 => uint) playerBetValue;
-    mapping (bytes32 => uint) playerTempBetValue;  
-    mapping (bytes32 => uint) playerRandomResult;     
+    mapping (bytes32 => uint) playerTempBetValue;       
     mapping (bytes32 => uint) playerDieResult;
     mapping (bytes32 => uint) playerNumber;
     mapping (address => uint) playerPendingWithdrawals;      
     mapping (bytes32 => uint) playerProfit;
-    mapping (bytes32 => uint) playerTempReward;    
-        
+    mapping (bytes32 => uint) playerTempReward;           
 
     /*
      * events
@@ -1368,7 +1369,7 @@
         
         oraclize_setNetwork(networkID_auto);        
         /* use TLSNotary for oraclize call */
-		oraclize_setProof(proofType_TLSNotary | proofStorage_IPFS);
+        oraclize_setProof(proofType_TLSNotary | proofStorage_IPFS);
         /* init 990 = 99% (1% houseEdge)*/
         ownerSetHouseEdge(990);
         /* init 10,000 = 1%  */
@@ -1405,8 +1406,8 @@
         * assign partially encrypted query to oraclize
         * only the apiKey is encrypted 
         * integer query is in plain text
-        */
-        bytes32 rngId = oraclize_query("nested", "[URL] ['json(https://api.random.org/json-rpc/1/invoke).result.random[\"serialNumber\",\"data\"]', '\\n{\"jsonrpc\":\"2.0\",\"method\":\"generateSignedIntegers\",\"params\":{\"apiKey\":${[decrypt] BHrsuMrqGYGRVo6Kfrnim4uIpUHvMfSZ7Guzh5RynW9VHmIspBaRyBsl/ZtGW94TgTyxDr9c8Zkv5Iivc0HaYv47jhB5Dte8/IiYiBFjk5X8ujtZsqlBOVDY9P5HbawfSP11iYZwPkhZc2PyS4Nfe0aOoyVZKiA=},\"n\":1,\"min\":1,\"max\":100,\"replacement\":true,\"base\":10${[identity] \"}\"},\"id\":1${[identity] \"}\"}']", gasForOraclize);
+        */        
+        bytes32 rngId = oraclize_query("nested", "[URL] ['json(https://api.random.org/json-rpc/1/invoke).result.random[\"serialNumber\",\"data\"]', '\\n{\"jsonrpc\":\"2.0\",\"method\":\"generateSignedIntegers\",\"params\":{\"apiKey\":${[decrypt] BLTr+ZtMOLP2SQVXx8GRscYuXv+3wY5zdFgrQZNMMY3oO/6C7OoQkgu3KgfBuiJWW1S3U/+ya10XFGHv2P7MB7VYwFIZd3VOMI/Os8o1uJCdGGZgpR0Dkm5QoNH7MbDM0wa2RewBqlVLFGoZX1PJC+igBPNoHC4=},\"n\":1,\"min\":1,\"max\":100,\"replacement\":true,\"base\":10${[identity] \"}\"},\"id\":1${[identity] \"}\"}']", gasForOraclize);
         	    
         /* map bet id to this oraclize query */
 		playerBetId[rngId] = rngId;
@@ -1446,12 +1447,7 @@
         uint serialNumberOfResult = parseInt(sl_result.split(', '.toSlice()).toString());          
 
 	    /* map result to player */
-        playerRandomResult[myid] = parseInt(sl_result.beyond("[".toSlice()).until("]".toSlice()).toString());
-        
-        /* produce integer bounded to 1-100 inclusive
-        *  via sha3 result from random.org and proof (IPFS address of TLSNotary proof)
-        */
-        playerDieResult[myid] = uint(sha3(playerRandomResult[myid], proof)) % 100 + 1;
+        playerDieResult[myid] = parseInt(sl_result.beyond("[".toSlice()).until("]".toSlice()).toString());
         
         /* get the playerAddress for this query id */
         playerTempAddress[myid] = playerAddress[myid];
@@ -1469,14 +1465,14 @@
         /* map the playerBetValue for this query id */
         playerTempBetValue[myid] = playerBetValue[myid];
         /* set  playerBetValue for this query id to 0 */
-        playerBetValue[myid] = 0;                                             
+        playerBetValue[myid] = 0;                                                   
 
         /*
         * refund
-        * if result from oraclize is 0 refund only the original bet value
+        * if result is 0 result is empty or no proof refund original bet value
         * if refund fails save refund value to playerPendingWithdrawals
         */
-        if(playerDieResult[myid]==0){                                
+        if(playerDieResult[myid]==0 || bytes(result).length == 0 || bytes(proof).length == 0){                                                     
 
              LogResult(serialNumberOfResult, playerBetId[myid], playerTempAddress[myid], playerNumber[myid], playerDieResult[myid], playerTempBetValue[myid], 3, proof);            
 
