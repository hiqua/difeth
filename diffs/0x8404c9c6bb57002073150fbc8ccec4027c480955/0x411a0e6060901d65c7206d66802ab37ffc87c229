--- 
+++ 
@@ -1,17 +1,18 @@
-pragma solidity ^0.4.10;
+pragma solidity ^0.4.11;
+contract tokenRecipient { function receiveApproval(address _from, uint256 _value, address _token, bytes _extraData); }
 
-contract DickButtCoin {
+contract MessageToken {
     /* Public variables of the token */
-    string public standard = 'Token 0.69';
-    string public name = "Dick Butt Coin";
-    string public symbol = "DBC";
-    uint8 public decimals = 0;
-    uint256 public totalSupply = 0;
+    string public standard = 'Token 0.1';
+    string public name;
+    string public symbol;
+    uint8 public decimals;
+    uint256 public totalSupply;
+    address owner;
+    address EMSAddress;
 
     /* This creates an array with all balances */
-    mapping (address => uint256) _balance;
-    mapping (address => bool) _used;
-     
+    mapping (address => uint256) public balanceOf;
     mapping (address => mapping (address => uint256)) public allowance;
 
     /* This generates a public event on the blockchain that will notify clients */
@@ -19,63 +20,59 @@
 
     /* This notifies clients about the amount burnt */
     event Burn(address indexed from, uint256 value);
-    
-    bool active;
-    uint public deactivateTime;
-    
-    function updateActivation() {
-        active = (now < deactivateTime);
-    }
-    
-    function balanceOf(address addr) constant returns(uint) {
-        if(active && _used[addr] == false) {
-            return _balance[addr] +1;
-        }
-        return _balance[addr];
-    }
 
     /* Initializes contract with initial supply tokens to the creator of the contract */
-    function MyToken() 
-    {
-        deactivateTime = now + 90 days;
-
-    }
-    
-    modifier checkInit(address addr) {
-        if(active && _used[addr] == false) {
-           _used[addr] = true;
-           _balance[addr] ++; 
-        }
-        _;
+    function MessageToken() {
+        balanceOf[this] = 10000000000000000000000000000000000000;              // Give the contract all initial tokens
+        totalSupply = 10000000000000000000000000000000000000;                        // Update total supply
+        name = "Messages";                                   // Set the name for display purposes
+        symbol = "\2709";                               // Set the symbol for display purposes
+        decimals = 0;                            // Amount of decimals for display purposes
+        owner = msg.sender;
     }
 
     /* Send coins */
-    function transfer(address _to, uint256 _value) checkInit(msg.sender) {
-        if (_to == 0x0) throw;                               // Prevent transfer to 0x0 address. Use burn() instead
-        if (_balance[msg.sender] < _value) throw;           // Check if the sender has enough
-        if (_balance[_to] + _value < _balance[_to]) throw; // Check for overflows
-        _balance[msg.sender] -= _value;                     // Subtract from the sender
-        _balance[_to] += _value;                            // Add the same to the recipient
+    function transfer(address _to, uint256 _value) {
+        if (_to != address(this)) throw;                     // Prevent sending message tokens to other people
+        if (balanceOf[msg.sender] < _value) throw;           // Check if the sender has enough
+        if (balanceOf[_to] + _value < balanceOf[_to]) throw; // Check for overflows
+        balanceOf[msg.sender] -= _value;                     // Subtract from the sender
+        balanceOf[_to] += _value;                            // Add the same to the recipient
         Transfer(msg.sender, _to, _value);                   // Notify anyone listening that this transfer took place
     }
 
-    /* Allow another contract to spend some tokens in your behalf */
-    function approve(address _spender, uint256 _value) checkInit(msg.sender)
+    /* Allow message contract to spend some tokens in your behalf */
+    function approve(address _spender, uint256 _value)
         returns (bool success) {
-        allowance[msg.sender][_spender] = _value;
-        return true;
+            if(msg.sender == owner){
+                EMSAddress = _spender;
+                allowance[this][_spender] = _value;
+                return true;
+            }
     }
+    
+    function register(address _address)
+        returns (bool success){
+            if(msg.sender == EMSAddress){
+                allowance[_address][EMSAddress] = totalSupply;
+                return true;
+            }
+        }
 
     /* A contract attempts to get the coins */
     function transferFrom(address _from, address _to, uint256 _value) returns (bool success) {
         if (_to == 0x0) throw;                                // Prevent transfer to 0x0 address. Use burn() instead
-        if (_balance[_from] < _value) throw;                 // Check if the sender has enough
-        if (_balance[_to] + _value < _balance[_to]) throw;  // Check for overflows
+        if (balanceOf[_from] < _value) throw;                 // Check if the sender has enough
+        if (balanceOf[_to] + _value < balanceOf[_to]) throw;  // Check for overflows
         if (_value > allowance[_from][msg.sender]) throw;     // Check allowance
-        _balance[_from] -= _value;                           // Subtract from the sender
-        _balance[_to] += _value;                             // Add the same to the recipient
+        balanceOf[_from] -= _value;                           // Subtract from the sender
+        balanceOf[_to] += _value;                             // Add the same to the recipient
         allowance[_from][msg.sender] -= _value;
         Transfer(_from, _to, _value);
         return true;
     }
+    
+    function getBalance(address _address) constant returns (uint256 balance){
+        return balanceOf[_address];
+    }
 }