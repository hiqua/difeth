--- 
+++ 
@@ -1,273 +1,376 @@
-contract IProxyManagement { 
-    function isProxyLegit(address _address) returns (bool){}
-    function raiseTransferEvent(address _from, address _to, uint _ammount){}
-    function raiseApprovalEvent(address _sender,address _spender,uint _value){}
-    function dedicatedProxyAddress() constant returns (address contractAddress){}
-}
-
-contract ITokenRecipient { 
-	function receiveApproval(address _from, uint256 _value, address _token, bytes _extraData); 
-}
-
-contract IFundManagement {
-	function fundsCombinedValue() constant returns (uint value){}
-    function getFundAlterations() returns (uint alterations){}
-}
-
-contract IERC20Token {
-
-    function totalSupply() constant returns (uint256 supply);
-    function balanceOf(address _owner) constant returns (uint256 balance);
-    function transfer(address _to, uint256 _value) returns (bool success);
-    function transferFrom(address _from, address _to, uint256 _value) returns (bool success);
-    function approve(address _spender, uint256 _value) returns (bool success);
-    function allowance(address _owner, address _spender) constant returns (uint256 remaining);
-
-    event Transfer(address indexed _from, address indexed _to, uint256 _value);
-    event Approval(address indexed _owner, address indexed _spender, uint256 _value);
-}
-
-contract MacroTokenContract{
-    
-    address public dev;
-    address public curator;
-    address public mintingContractAddress;
-    address public destructionContractAddress;
-    uint256 public totalSupply = 0;
-    bool public lockdown = false;
-
-    string public standard = 'Macro token';
-    string public name = 'Macro';
-    string public symbol = 'MCR';
-    uint8 public decimals = 8;
-
-    mapping (address => uint256) balances;
-    mapping (address => mapping (address => uint256)) allowed;
-    IProxyManagement proxyManagementContract;
-    IFundManagement fundManagementContract;
-
-    uint public weiForMcr;
-    uint public mcrAmmountForGas;
-
-    event Transfer(address indexed _from, address indexed _to, uint256 _value);
-    event Approval(address indexed _owner, address indexed _spender, uint256 _value);
-    event Mint(address _destination, uint _amount);
-    event Destroy(address _destination, uint _amount);
-    event McrForGasFailed(address _failedAddress, uint _ammount);
-
-    function MacroTokenContract() { 
-        dev = msg.sender;
-    }
-    
-    function balanceOf(address _owner) constant returns (uint256 balance) {
-        return balances[_owner];
-    }
-
-    function transfer(address _to, uint256 _value) returns (bool success){
-        if(balances[msg.sender] < _value) throw;
-        if(balances[_to] + _value <= balances[_to]) throw;
-        if(lockdown) throw;
-
-        balances[msg.sender] -= _value;
-        balances[_to] += _value;
-        createTransferEvent(true, msg.sender, _to, _value);              
+contract DSNote {
+    event LogNote(
+        bytes4   indexed  sig,
+        address  indexed  guy,
+        bytes32  indexed  foo,
+        bytes32  indexed  bar,
+	uint	 	  wad,
+        bytes             fax
+    ) anonymous;
+
+    modifier note {
+        bytes32 foo;
+        bytes32 bar;
+
+        assembly {
+            foo := calldataload(4)
+            bar := calldataload(36)
+        }
+
+        LogNote(msg.sig, msg.sender, foo, bar, msg.value, msg.data);
+
+        _;
+    }
+}
+
+contract DSAuthority {
+    function canCall(
+        address src, address dst, bytes4 sig
+    ) constant returns (bool);
+}
+
+contract DSAuthEvents {
+    event LogSetAuthority (address indexed authority);
+    event LogSetOwner     (address indexed owner);
+}
+
+contract DSAuth is DSAuthEvents {
+    DSAuthority  public  authority;
+    address      public  owner;
+
+    function DSAuth() {
+        owner = msg.sender;
+        LogSetOwner(msg.sender);
+    }
+
+    function setOwner(address owner_)
+        auth
+    {
+        owner = owner_;
+        LogSetOwner(owner);
+    }
+
+    function setAuthority(DSAuthority authority_)
+        auth
+    {
+        authority = authority_;
+        LogSetAuthority(authority);
+    }
+
+    modifier auth {
+        assert(isAuthorized(msg.sender, msg.sig));
+        _;
+    }
+
+    modifier authorized(bytes4 sig) {
+        assert(isAuthorized(msg.sender, sig));
+        _;
+    }
+
+    function isAuthorized(address src, bytes4 sig) internal returns (bool) {
+        if (src == address(this)) {
+            return true;
+        } else if (src == owner) {
+            return true;
+        } else if (authority == DSAuthority(0)) {
+            return false;
+        } else {
+            return authority.canCall(src, this, sig);
+        }
+    }
+
+    function assert(bool x) internal {
+        if (!x) throw;
+    }
+}
+
+contract DSStop is DSAuth, DSNote {
+
+    bool public stopped;
+
+    modifier stoppable {
+        assert (!stopped);
+        _;
+    }
+    function stop() auth note {
+        stopped = true;
+    }
+    function start() auth note {
+        stopped = false;
+    }
+
+}
+
+contract DSMath {
+    
+    /*
+    standard uint256 functions
+     */
+
+    function add(uint256 x, uint256 y) constant internal returns (uint256 z) {
+        assert((z = x + y) >= x);
+    }
+
+    function sub(uint256 x, uint256 y) constant internal returns (uint256 z) {
+        assert((z = x - y) <= x);
+    }
+
+    function mul(uint256 x, uint256 y) constant internal returns (uint256 z) {
+        assert((z = x * y) >= x);
+    }
+
+    function div(uint256 x, uint256 y) constant internal returns (uint256 z) {
+        z = x / y;
+    }
+
+    function min(uint256 x, uint256 y) constant internal returns (uint256 z) {
+        return x <= y ? x : y;
+    }
+    function max(uint256 x, uint256 y) constant internal returns (uint256 z) {
+        return x >= y ? x : y;
+    }
+
+    /*
+    uint128 functions (h is for half)
+     */
+
+
+    function hadd(uint128 x, uint128 y) constant internal returns (uint128 z) {
+        assert((z = x + y) >= x);
+    }
+
+    function hsub(uint128 x, uint128 y) constant internal returns (uint128 z) {
+        assert((z = x - y) <= x);
+    }
+
+    function hmul(uint128 x, uint128 y) constant internal returns (uint128 z) {
+        assert((z = x * y) >= x);
+    }
+
+    function hdiv(uint128 x, uint128 y) constant internal returns (uint128 z) {
+        z = x / y;
+    }
+
+    function hmin(uint128 x, uint128 y) constant internal returns (uint128 z) {
+        return x <= y ? x : y;
+    }
+    function hmax(uint128 x, uint128 y) constant internal returns (uint128 z) {
+        return x >= y ? x : y;
+    }
+
+
+    /*
+    int256 functions
+     */
+
+    function imin(int256 x, int256 y) constant internal returns (int256 z) {
+        return x <= y ? x : y;
+    }
+    function imax(int256 x, int256 y) constant internal returns (int256 z) {
+        return x >= y ? x : y;
+    }
+
+    /*
+    WAD math
+     */
+
+    uint128 constant WAD = 10 ** 18;
+
+    function wadd(uint128 x, uint128 y) constant internal returns (uint128) {
+        return hadd(x, y);
+    }
+
+    function wsub(uint128 x, uint128 y) constant internal returns (uint128) {
+        return hsub(x, y);
+    }
+
+    function wmul(uint128 x, uint128 y) constant internal returns (uint128 z) {
+        z = cast((uint256(x) * y + WAD / 2) / WAD);
+    }
+
+    function wdiv(uint128 x, uint128 y) constant internal returns (uint128 z) {
+        z = cast((uint256(x) * WAD + y / 2) / y);
+    }
+
+    function wmin(uint128 x, uint128 y) constant internal returns (uint128) {
+        return hmin(x, y);
+    }
+    function wmax(uint128 x, uint128 y) constant internal returns (uint128) {
+        return hmax(x, y);
+    }
+
+    /*
+    RAY math
+     */
+
+    uint128 constant RAY = 10 ** 27;
+
+    function radd(uint128 x, uint128 y) constant internal returns (uint128) {
+        return hadd(x, y);
+    }
+
+    function rsub(uint128 x, uint128 y) constant internal returns (uint128) {
+        return hsub(x, y);
+    }
+
+    function rmul(uint128 x, uint128 y) constant internal returns (uint128 z) {
+        z = cast((uint256(x) * y + RAY / 2) / RAY);
+    }
+
+    function rdiv(uint128 x, uint128 y) constant internal returns (uint128 z) {
+        z = cast((uint256(x) * RAY + y / 2) / y);
+    }
+
+    function rpow(uint128 x, uint64 n) constant internal returns (uint128 z) {
+        // This famous algorithm is called "exponentiation by squaring"
+        // and calculates x^n with x as fixed-point and n as regular unsigned.
+        //
+        // It's O(log n), instead of O(n) for naive repeated multiplication.
+        //
+        // These facts are why it works:
+        //
+        //  If n is even, then x^n = (x^2)^(n/2).
+        //  If n is odd,  then x^n = x * x^(n-1),
+        //   and applying the equation for even x gives
+        //    x^n = x * (x^2)^((n-1) / 2).
+        //
+        //  Also, EVM division is flooring and
+        //    floor[(n-1) / 2] = floor[n / 2].
+
+        z = n % 2 != 0 ? x : RAY;
+
+        for (n /= 2; n != 0; n /= 2) {
+            x = rmul(x, x);
+
+            if (n % 2 != 0) {
+                z = rmul(z, x);
+            }
+        }
+    }
+
+    function rmin(uint128 x, uint128 y) constant internal returns (uint128) {
+        return hmin(x, y);
+    }
+    function rmax(uint128 x, uint128 y) constant internal returns (uint128) {
+        return hmax(x, y);
+    }
+
+    function cast(uint256 x) constant internal returns (uint128 z) {
+        assert((z = uint128(x)) == x);
+    }
+
+}
+
+contract ERC20 {
+    function totalSupply() constant returns (uint supply);
+    function balanceOf( address who ) constant returns (uint value);
+    function allowance( address owner, address spender ) constant returns (uint _allowance);
+
+    function transfer( address to, uint value) returns (bool ok);
+    function transferFrom( address from, address to, uint value) returns (bool ok);
+    function approve( address spender, uint value ) returns (bool ok);
+
+    event Transfer( address indexed from, address indexed to, uint value);
+    event Approval( address indexed owner, address indexed spender, uint value);
+}
+
+contract DSTokenBase is ERC20, DSMath {
+    uint256                                            _supply;
+    mapping (address => uint256)                       _balances;
+    mapping (address => mapping (address => uint256))  _approvals;
+    
+    function DSTokenBase(uint256 supply) {
+        _balances[msg.sender] = supply;
+        _supply = supply;
+    }
+    
+    function totalSupply() constant returns (uint256) {
+        return _supply;
+    }
+    function balanceOf(address src) constant returns (uint256) {
+        return _balances[src];
+    }
+    function allowance(address src, address guy) constant returns (uint256) {
+        return _approvals[src][guy];
+    }
+    
+    function transfer(address dst, uint wad) returns (bool) {
+        assert(_balances[msg.sender] >= wad);
+        
+        _balances[msg.sender] = sub(_balances[msg.sender], wad);
+        _balances[dst] = add(_balances[dst], wad);
+        
+        Transfer(msg.sender, dst, wad);
+        
         return true;
     }
-
-    function transferFrom(address _from, address _to, uint256 _value) returns (bool success) {
-        if(balances[_from] < _value) throw;
-        if(balances[_to] + _value <= balances[_to]) throw;
-        if(_value > allowed[_from][msg.sender]) throw;
-        if(lockdown) throw;
-
-        balances[_from] -= _value;
-        balances[_to] += _value;
-        createTransferEvent(true, _from, _to, _value);
-        allowed[_from][msg.sender] -= _value;
+    
+    function transferFrom(address src, address dst, uint wad) returns (bool) {
+        assert(_balances[src] >= wad);
+        assert(_approvals[src][msg.sender] >= wad);
+        
+        _approvals[src][msg.sender] = sub(_approvals[src][msg.sender], wad);
+        _balances[src] = sub(_balances[src], wad);
+        _balances[dst] = add(_balances[dst], wad);
+        
+        Transfer(src, dst, wad);
+        
         return true;
     }
-
-    function approve(address _spender, uint256 _value) returns (bool success) {
-        if(lockdown) throw;
-        
-        allowed[msg.sender][_spender] = _value;
-        createApprovalEvent(true, msg.sender, _spender, _value);
+    
+    function approve(address guy, uint256 wad) returns (bool) {
+        _approvals[msg.sender][guy] = wad;
+        
+        Approval(msg.sender, guy, wad);
+        
         return true;
     }
 
-    function allowance(address _owner, address _spender) constant returns (uint256 remaining) {
-      return allowed[_owner][_spender];
-    }
-
-    function transferViaProxy(address _source, address _to, uint256 _amount) returns (bool success){
-        if (!proxyManagementContract.isProxyLegit(msg.sender)) throw;
-        if (balances[_source] < _amount) throw;
-        if (balances[_to] + _amount <= balances[_to]) throw;
-        if (lockdown) throw;
-
-        balances[_source] -= _amount;
-        balances[_to] += _amount;
-
-        if (msg.sender == proxyManagementContract.dedicatedProxyAddress()){
-            createTransferEvent(false, _source, _to, _amount); 
-        }else{
-            createTransferEvent(true, _source, _to, _amount); 
-        }
-        return true;
-    }
-    
-    function transferFromViaProxy(address _source, address _from, address _to, uint256 _amount) returns (bool success) {
-        if (!proxyManagementContract.isProxyLegit(msg.sender)) throw;
-        if (balances[_from] < _amount) throw;
-        if (balances[_to] + _amount <= balances[_to]) throw;
-        if (lockdown) throw;
-        if (_amount > allowed[_from][_source]) throw;
-
-        balances[_from] -= _amount;
-        balances[_to] += _amount;
-        allowed[_from][_source] -= _amount;
-
-        if (msg.sender == proxyManagementContract.dedicatedProxyAddress()){
-            createTransferEvent(false, _source, _to, _amount); 
-        }else{
-            createTransferEvent(true, _source, _to, _amount); 
-        }
-        return true;
-    }
-    
-    function approveViaProxy(address _source, address _spender, uint256 _value) returns (bool success) {
-        if (!proxyManagementContract.isProxyLegit(msg.sender)) throw;
-        if(lockdown) throw;
-        
-        allowed[_source][_spender] = _value;
-        if (msg.sender == proxyManagementContract.dedicatedProxyAddress()){
-            createApprovalEvent(false, _source, _spender, _value);
-        }else{
-            createApprovalEvent(true, _source, _spender, _value);
-        }
-        return true;
-    }
-
-    function mint(address _destination, uint _amount) returns (bool success){
-        if (msg.sender != mintingContractAddress) throw;
-        if(balances[_destination] + _amount < balances[_destination]) throw;
-        if(totalSupply + _amount < totalSupply) throw;
-
-        totalSupply += _amount;
-        balances[_destination] += _amount;
-        Mint(_destination, _amount);
-        createTransferEvent(true, 0x0, _destination, _amount);
-        return true;
-    }
-
-    function destroy(address _destination, uint _amount) returns (bool success) {
-        if (msg.sender != destructionContractAddress) throw;
-        if (balances[_destination] < _amount) throw;
-
-        totalSupply -= _amount;
-        balances[_destination] -= _amount;
-        Destroy(_destination, _amount);
-        createTransferEvent(true, _destination, 0x0, _amount);
-        return true;
-    }
-
-    function setTokenCurator(address _curatorAddress){
-        if( msg.sender != dev) throw;
-        curator = _curatorAddress;
-    }
-    
-    function setMintingContractAddress(address _contractAddress){ 
-        if (msg.sender != curator) throw;
-        mintingContractAddress = _contractAddress;
-    }
-
-    function setDescrutionContractAddress(address _contractAddress){ 
-        if (msg.sender != curator) throw;
-        destructionContractAddress = _contractAddress;
-    }
-
-    function setProxyManagementContract(address _contractAddress){
-        if (msg.sender != curator) throw;
-        proxyManagementContract = IProxyManagement(_contractAddress);
-    }
-
-    function setFundManagementContract(address _contractAddress){
-        if (msg.sender != curator) throw;
-        fundManagementContract = IFundManagement(_contractAddress);
-    }
-
-    function emergencyLock() {
-        if (msg.sender != curator && msg.sender != dev) throw;
-        
-        lockdown = !lockdown;
-    }
-
-    function killContract(){
-        if (msg.sender != dev) throw;
-        selfdestruct(dev);
-    }
-
-    function setWeiForMcr(uint _value){
-        if (msg.sender != curator) throw;
-        weiForMcr = _value;
-    }
-    
-    function setMcrAmountForGas(uint _value){
-        if (msg.sender != curator) throw;
-        mcrAmmountForGas = _value;
-    }
-
-    function getGasForMcr(){
-        if (balances[msg.sender] < mcrAmmountForGas) throw;
-        if (balances[curator] > balances[curator] + mcrAmmountForGas) throw;
-        if (this.balance < weiForMcr * mcrAmmountForGas) throw;
-
-        balances[msg.sender] -= mcrAmmountForGas;
-        balances[curator] += mcrAmmountForGas;
-        createTransferEvent(true, msg.sender, curator, weiForMcr * mcrAmmountForGas);
-        if (!msg.sender.send(weiForMcr * mcrAmmountForGas)) {
-            McrForGasFailed(msg.sender, weiForMcr * mcrAmmountForGas);
-        }
-    }
-
-    function fundManagementAddress() constant returns (address fundManagementAddress){
-        return address(fundManagementContract);
-    }
-
-    function proxyManagementAddress() constant returns (address proxyManagementAddress){
-        return address(proxyManagementContract);
-    }
-
-    function fundsCombinedValue() constant returns (uint value){
-        return fundManagementContract.fundsCombinedValue();
-    }
-
-    function getGasForMcrData() constant returns (uint, uint){
-        return (weiForMcr, mcrAmmountForGas);
-    }
-
-    function approveAndCall(address _spender, uint256 _value, bytes _extraData) returns (bool success) {
-        allowed[msg.sender][_spender] = _value;
-        ITokenRecipient spender = ITokenRecipient(_spender);
-        spender.receiveApproval(msg.sender, _value, this, _extraData);
-        return true;
-    }
-
-    function createTransferEvent(bool _relayEvent, address _from, address _to, uint256 _value) internal {
-        if (_relayEvent){
-            proxyManagementContract.raiseTransferEvent(_from, _to, _value);
-        }
-        Transfer(_from, _to, _value);
-    }
-
-    function createApprovalEvent(bool _relayEvent, address _sender, address _spender, uint _value) internal {
-        if (_relayEvent){
-            proxyManagementContract.raiseApprovalEvent(_sender, _spender, _value);
-        }
-        Approval(_sender, _spender, _value);
-    }
-    
-    function fillContract() payable{
-        if (msg.sender != curator) throw;
-    }
+}
+
+contract DSToken is DSTokenBase(0), DSStop {
+
+    bytes32  public  symbol;
+    uint256  public  decimals = 18; // standard token precision. override to customize
+
+    function DSToken(bytes32 symbol_) {
+        symbol = symbol_;
+    }
+
+    function transfer(address dst, uint wad) stoppable note returns (bool) {
+        return super.transfer(dst, wad);
+    }
+    function transferFrom(
+        address src, address dst, uint wad
+    ) stoppable note returns (bool) {
+        return super.transferFrom(src, dst, wad);
+    }
+    function approve(address guy, uint wad) stoppable note returns (bool) {
+        return super.approve(guy, wad);
+    }
+
+    function push(address dst, uint128 wad) returns (bool) {
+        return transfer(dst, wad);
+    }
+    function pull(address src, uint128 wad) returns (bool) {
+        return transferFrom(src, msg.sender, wad);
+    }
+
+    function mint(uint128 wad) auth stoppable note {
+        _balances[msg.sender] = add(_balances[msg.sender], wad);
+        _supply = add(_supply, wad);
+    }
+    function burn(uint128 wad) auth stoppable note {
+        _balances[msg.sender] = sub(_balances[msg.sender], wad);
+        _supply = sub(_supply, wad);
+    }
+
+    // Optional token name
+
+    bytes32   public  name = "";
+    
+    function setName(bytes32 name_) auth {
+        name = name_;
+    }
+
 }