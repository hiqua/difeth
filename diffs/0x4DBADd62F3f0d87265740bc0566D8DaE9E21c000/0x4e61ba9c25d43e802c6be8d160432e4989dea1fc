--- 
+++ 
@@ -1,273 +1,170 @@
-contract IProxyManagement { 
-    function isProxyLegit(address _address) returns (bool){}
-    function raiseTransferEvent(address _from, address _to, uint _ammount){}
-    function raiseApprovalEvent(address _sender,address _spender,uint _value){}
-    function dedicatedProxyAddress() constant returns (address contractAddress){}
+pragma solidity ^0.4.11;
+
+/*
+  Allows buyers to securely/confidently buy recent ICO tokens that are
+  still non-transferrable, on an IOU basis. Like HitBTC, but with protection,
+  control, and guarantee of either the purchased tokens or ETH refunded.
+
+  The Buyer's ETH will be locked into the contract until the purchased
+  IOU/tokens arrive here and are ready for the buyer to invoke withdraw(),
+  OR until cut-off time defined below is exceeded and as a result ETH
+  refunds/withdrawals become enabled.
+
+  The buyer's ETH will ONLY be released to the seller AFTER the buyer
+  manually withdraws their tokens by sending this contract a transaction
+  with 0 ETH.
+
+  In other words, the seller must fulfill the IOU token purchases any time
+  before the cut-off time defined below, otherwise the buyer gains the
+  ability to withdraw their ETH.
+
+  Estimated Time of Distribution: 3-5 weeks from ICO according to TenX
+  Cut-off Time: ~ August 9, 2017
+
+  Greetz: blast, cintix
+  Bounty: foobarbizarre@gmail.com (Please report any findings or suggestions!)
+
+  Thank you
+*/
+
+contract ERC20 {
+  function transfer(address _to, uint _value);
+  function balanceOf(address _owner) constant returns (uint balance);
 }
 
-contract ITokenRecipient { 
-	function receiveApproval(address _from, uint256 _value, address _token, bytes _extraData); 
-}
+contract IOU {
+  // Store the amount of IOUs purchased by a buyer
+  mapping (address => uint256) public iou_purchased;
 
-contract IFundManagement {
-	function fundsCombinedValue() constant returns (uint value){}
-    function getFundAlterations() returns (uint alterations){}
-}
+  // Store the amount of ETH sent in by a buyer
+  mapping (address => uint256) public eth_sent;
 
-contract IERC20Token {
+  // Total IOUs available to sell
+  uint256 public total_iou_available = 52500000000000000000000;
 
-    function totalSupply() constant returns (uint256 supply);
-    function balanceOf(address _owner) constant returns (uint256 balance);
-    function transfer(address _to, uint256 _value) returns (bool success);
-    function transferFrom(address _from, address _to, uint256 _value) returns (bool success);
-    function approve(address _spender, uint256 _value) returns (bool success);
-    function allowance(address _owner, address _spender) constant returns (uint256 remaining);
+  // Total IOUs purchased by all buyers
+  uint256 public total_iou_purchased;
 
-    event Transfer(address indexed _from, address indexed _to, uint256 _value);
-    event Approval(address indexed _owner, address indexed _spender, uint256 _value);
-}
+  //  PAY token contract address (IOU offering)
+  ERC20 public token = ERC20(0xB97048628DB6B661D4C2aA833e95Dbe1A905B280);
 
-contract MacroTokenContract{
-    
-    address public dev;
-    address public curator;
-    address public mintingContractAddress;
-    address public destructionContractAddress;
-    uint256 public totalSupply = 0;
-    bool public lockdown = false;
+  // The seller's address (to receive ETH upon distribution, and for authing safeties)
+  address seller = 0xB00Ae1e677B27Eee9955d632FF07a8590210B366;
 
-    string public standard = 'Macro token';
-    string public name = 'Macro';
-    string public symbol = 'MCR';
-    uint8 public decimals = 8;
+  // Halt further purchase ability just in case
+  bool public halt_purchases;
 
-    mapping (address => uint256) balances;
-    mapping (address => mapping (address => uint256)) allowed;
-    IProxyManagement proxyManagementContract;
-    IFundManagement fundManagementContract;
+  /*
+    Safety to withdraw all tokens back to seller in the event any get stranded.
+    Does not leave buyers susceptible. If anything, not enough tokens in the contract
+    will enable them to withdraw their ETH so long as the specified block.number has been mined
+  */
+  function withdrawTokens() {
+    if(msg.sender != seller) throw;
+    token.transfer(seller, token.balanceOf(address(this)));
+  }
 
-    uint public weiForMcr;
-    uint public mcrAmmountForGas;
+  /*
+    Safety to prevent anymore purchases/sales from occurring in the event of
+    unforeseen issue, or if seller wishes to limit this particular sale price
+    and start a new contract with a new price. The contract will of course
+    allow withdrawals to occur still.
+  */
+  function haltPurchases() {
+    if(msg.sender != seller) throw;
+    halt_purchases = true;
+  }
 
-    event Transfer(address indexed _from, address indexed _to, uint256 _value);
-    event Approval(address indexed _owner, address indexed _spender, uint256 _value);
-    event Mint(address _destination, uint _amount);
-    event Destroy(address _destination, uint _amount);
-    event McrForGasFailed(address _failedAddress, uint _ammount);
+  function resumePurchases() {
+    if(msg.sender != seller) throw;
+    halt_purchases = false;
+  }
 
-    function MacroTokenContract() { 
-        dev = msg.sender;
-    }
-    
-    function balanceOf(address _owner) constant returns (uint256 balance) {
-        return balances[_owner];
+  function withdraw() payable {
+    /*
+      Main mechanism to ensure a buyer's purchase/ETH/IOU is safe.
+
+      Refund the buyer's ETH if we're beyond the cut-off date of our distribution
+      promise AND if the contract doesn't have an adequate amount of tokens
+      to distribute to the buyer. Time-sensitive buyer/ETH protection is only
+      applicable if the contract doesn't have adequate tokens for the buyer.
+
+      The "adequacy" check prevents the seller and/or third party attacker
+      from locking down buyers' ETH by sending in an arbitrary amount of tokens.
+
+      If for whatever reason the tokens remain locked for an unexpected period
+      beyond the time defined by block.number, patient buyers may still wait until
+      the contract is filled with their purchased IOUs/tokens. Once the tokens
+      are here, they can initiate a withdraw() to retrieve their tokens. Attempting
+      to withdraw any sooner (after the block has been mined, but tokens not arrived)
+      will result in a refund of buyer's ETH.
+    */
+    if(block.number > 4199999 && iou_purchased[msg.sender] > token.balanceOf(address(this))) {
+      // We didn't fulfill our promise to have adequate tokens withdrawable at xx time
+      // Refund the buyer's ETH automatically instead
+      uint256 eth_to_refund = eth_sent[msg.sender];
+
+      // If the user doesn't have any ETH or tokens to withdraw, get out ASAP
+      if(eth_to_refund == 0 || iou_purchased[msg.sender] == 0) throw;
+
+      // Adjust total purchased so others can buy
+      total_iou_purchased -= iou_purchased[msg.sender];
+
+      // Clear record of buyer's ETH and IOU balance before refunding
+      eth_sent[msg.sender] = 0;
+      iou_purchased[msg.sender] = 0;
+
+      msg.sender.transfer(eth_to_refund);
+      return;
     }
 
-    function transfer(address _to, uint256 _value) returns (bool success){
-        if(balances[msg.sender] < _value) throw;
-        if(balances[_to] + _value <= balances[_to]) throw;
-        if(lockdown) throw;
+    /*
+      Check if there is an adequate amount of tokens in the contract yet
+      and allow the buyer to withdraw tokens and release ETH to the seller if so
+    */
+    if(token.balanceOf(address(this)) == 0 || iou_purchased[msg.sender] > token.balanceOf(address(this))) throw;
 
-        balances[msg.sender] -= _value;
-        balances[_to] += _value;
-        createTransferEvent(true, msg.sender, _to, _value);              
-        return true;
+    uint256 iou_to_withdraw = iou_purchased[msg.sender];
+    uint256 eth_to_release = eth_sent[msg.sender];
+
+    // If the user doesn't have any IOUs or ETH to withdraw/release, get out ASAP
+    if(iou_to_withdraw == 0 || eth_to_release == 0) throw;
+
+    // Clear record of buyer's IOU and ETH balance before transferring out
+    iou_purchased[msg.sender] = 0;
+    eth_sent[msg.sender] = 0;
+
+    // Distribute tokens to the buyer
+    token.transfer(msg.sender, iou_to_withdraw);
+
+    // Release buyer's ETH to the seller
+    seller.transfer(eth_to_release);
+  }
+
+  function purchase() payable {
+    if(halt_purchases) throw;
+
+    // Determine amount of tokens user wants to/can buy
+    uint256 iou_to_purchase = 160 * msg.value; // price is 160 per ETH
+
+    // Check if we have enough IOUs left to sell
+    if((total_iou_purchased + iou_to_purchase) > total_iou_available) throw;
+
+    // Update the amount of IOUs purchased by user. Also keep track of the total ETH they sent in
+    iou_purchased[msg.sender] += iou_to_purchase;
+    eth_sent[msg.sender] += msg.value;
+
+    // Update the total amount of IOUs purchased by all buyers
+    total_iou_purchased += iou_to_purchase;
+  }
+
+  // Fallback function/entry point
+  function () payable {
+    if(msg.value == 0) {
+      withdraw();
     }
-
-    function transferFrom(address _from, address _to, uint256 _value) returns (bool success) {
-        if(balances[_from] < _value) throw;
-        if(balances[_to] + _value <= balances[_to]) throw;
-        if(_value > allowed[_from][msg.sender]) throw;
-        if(lockdown) throw;
-
-        balances[_from] -= _value;
-        balances[_to] += _value;
-        createTransferEvent(true, _from, _to, _value);
-        allowed[_from][msg.sender] -= _value;
-        return true;
+    else {
+      purchase();
     }
-
-    function approve(address _spender, uint256 _value) returns (bool success) {
-        if(lockdown) throw;
-        
-        allowed[msg.sender][_spender] = _value;
-        createApprovalEvent(true, msg.sender, _spender, _value);
-        return true;
-    }
-
-    function allowance(address _owner, address _spender) constant returns (uint256 remaining) {
-      return allowed[_owner][_spender];
-    }
-
-    function transferViaProxy(address _source, address _to, uint256 _amount) returns (bool success){
-        if (!proxyManagementContract.isProxyLegit(msg.sender)) throw;
-        if (balances[_source] < _amount) throw;
-        if (balances[_to] + _amount <= balances[_to]) throw;
-        if (lockdown) throw;
-
-        balances[_source] -= _amount;
-        balances[_to] += _amount;
-
-        if (msg.sender == proxyManagementContract.dedicatedProxyAddress()){
-            createTransferEvent(false, _source, _to, _amount); 
-        }else{
-            createTransferEvent(true, _source, _to, _amount); 
-        }
-        return true;
-    }
-    
-    function transferFromViaProxy(address _source, address _from, address _to, uint256 _amount) returns (bool success) {
-        if (!proxyManagementContract.isProxyLegit(msg.sender)) throw;
-        if (balances[_from] < _amount) throw;
-        if (balances[_to] + _amount <= balances[_to]) throw;
-        if (lockdown) throw;
-        if (_amount > allowed[_from][_source]) throw;
-
-        balances[_from] -= _amount;
-        balances[_to] += _amount;
-        allowed[_from][_source] -= _amount;
-
-        if (msg.sender == proxyManagementContract.dedicatedProxyAddress()){
-            createTransferEvent(false, _source, _to, _amount); 
-        }else{
-            createTransferEvent(true, _source, _to, _amount); 
-        }
-        return true;
-    }
-    
-    function approveViaProxy(address _source, address _spender, uint256 _value) returns (bool success) {
-        if (!proxyManagementContract.isProxyLegit(msg.sender)) throw;
-        if(lockdown) throw;
-        
-        allowed[_source][_spender] = _value;
-        if (msg.sender == proxyManagementContract.dedicatedProxyAddress()){
-            createApprovalEvent(false, _source, _spender, _value);
-        }else{
-            createApprovalEvent(true, _source, _spender, _value);
-        }
-        return true;
-    }
-
-    function mint(address _destination, uint _amount) returns (bool success){
-        if (msg.sender != mintingContractAddress) throw;
-        if(balances[_destination] + _amount < balances[_destination]) throw;
-        if(totalSupply + _amount < totalSupply) throw;
-
-        totalSupply += _amount;
-        balances[_destination] += _amount;
-        Mint(_destination, _amount);
-        createTransferEvent(true, 0x0, _destination, _amount);
-        return true;
-    }
-
-    function destroy(address _destination, uint _amount) returns (bool success) {
-        if (msg.sender != destructionContractAddress) throw;
-        if (balances[_destination] < _amount) throw;
-
-        totalSupply -= _amount;
-        balances[_destination] -= _amount;
-        Destroy(_destination, _amount);
-        createTransferEvent(true, _destination, 0x0, _amount);
-        return true;
-    }
-
-    function setTokenCurator(address _curatorAddress){
-        if( msg.sender != dev) throw;
-        curator = _curatorAddress;
-    }
-    
-    function setMintingContractAddress(address _contractAddress){ 
-        if (msg.sender != curator) throw;
-        mintingContractAddress = _contractAddress;
-    }
-
-    function setDescrutionContractAddress(address _contractAddress){ 
-        if (msg.sender != curator) throw;
-        destructionContractAddress = _contractAddress;
-    }
-
-    function setProxyManagementContract(address _contractAddress){
-        if (msg.sender != curator) throw;
-        proxyManagementContract = IProxyManagement(_contractAddress);
-    }
-
-    function setFundManagementContract(address _contractAddress){
-        if (msg.sender != curator) throw;
-        fundManagementContract = IFundManagement(_contractAddress);
-    }
-
-    function emergencyLock() {
-        if (msg.sender != curator && msg.sender != dev) throw;
-        
-        lockdown = !lockdown;
-    }
-
-    function killContract(){
-        if (msg.sender != dev) throw;
-        selfdestruct(dev);
-    }
-
-    function setWeiForMcr(uint _value){
-        if (msg.sender != curator) throw;
-        weiForMcr = _value;
-    }
-    
-    function setMcrAmountForGas(uint _value){
-        if (msg.sender != curator) throw;
-        mcrAmmountForGas = _value;
-    }
-
-    function getGasForMcr(){
-        if (balances[msg.sender] < mcrAmmountForGas) throw;
-        if (balances[curator] > balances[curator] + mcrAmmountForGas) throw;
-        if (this.balance < weiForMcr * mcrAmmountForGas) throw;
-
-        balances[msg.sender] -= mcrAmmountForGas;
-        balances[curator] += mcrAmmountForGas;
-        createTransferEvent(true, msg.sender, curator, weiForMcr * mcrAmmountForGas);
-        if (!msg.sender.send(weiForMcr * mcrAmmountForGas)) {
-            McrForGasFailed(msg.sender, weiForMcr * mcrAmmountForGas);
-        }
-    }
-
-    function fundManagementAddress() constant returns (address fundManagementAddress){
-        return address(fundManagementContract);
-    }
-
-    function proxyManagementAddress() constant returns (address proxyManagementAddress){
-        return address(proxyManagementContract);
-    }
-
-    function fundsCombinedValue() constant returns (uint value){
-        return fundManagementContract.fundsCombinedValue();
-    }
-
-    function getGasForMcrData() constant returns (uint, uint){
-        return (weiForMcr, mcrAmmountForGas);
-    }
-
-    function approveAndCall(address _spender, uint256 _value, bytes _extraData) returns (bool success) {
-        allowed[msg.sender][_spender] = _value;
-        ITokenRecipient spender = ITokenRecipient(_spender);
-        spender.receiveApproval(msg.sender, _value, this, _extraData);
-        return true;
-    }
-
-    function createTransferEvent(bool _relayEvent, address _from, address _to, uint256 _value) internal {
-        if (_relayEvent){
-            proxyManagementContract.raiseTransferEvent(_from, _to, _value);
-        }
-        Transfer(_from, _to, _value);
-    }
-
-    function createApprovalEvent(bool _relayEvent, address _sender, address _spender, uint _value) internal {
-        if (_relayEvent){
-            proxyManagementContract.raiseApprovalEvent(_sender, _spender, _value);
-        }
-        Approval(_sender, _spender, _value);
-    }
-    
-    function fillContract() payable{
-        if (msg.sender != curator) throw;
-    }
+  }
 }