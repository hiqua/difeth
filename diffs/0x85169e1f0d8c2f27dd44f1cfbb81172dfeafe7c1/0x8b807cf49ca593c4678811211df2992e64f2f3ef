--- 
+++ 
@@ -1,64 +1,51 @@
 pragma solidity ^0.4.6;
 
-//
-// ==== DISCLAIMER ====
-//
-// ETHEREUM IS STILL AN EXPEREMENTAL TECHNOLOGY.
-// ALTHOUGH THIS SMART CONTRACT WAS CREATED WITH GREAT CARE AND IN THE HOPE OF BEING USEFUL, NO GUARANTEES OF FLAWLESS OPERATION CAN BE GIVEN. 
-// IN PARTICULAR - SUBTILE BUGS, HACKER ATTACKS OR MALFUNCTION OF UNDERLYING TECHNOLOGY CAN CAUSE UNINTENTIONAL BEHAVIOUR. 
-// YOU ARE STRONGLY ENCOURAGED TO STUDY THIS SMART CONTRACT CAREFULLY IN ORDER TO UNDERSTAND POSSIBLE EDGE CASES AND RISKS. 
-// DON'T USE THIS SMART CONTRACT IF YOU HAVE SUBSTANTIAL DOUBTS OR IF YOU DON'T KNOW WHAT YOU ARE DOING.
-//
-// THIS SOFTWARE IS PROVIDED "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY 
-// AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, 
-// INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, 
-// OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, 
-// OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
-// ====
-//
-//
-// ==== PARANOIA NOTICE ==== 
-// A careful reader will find some additional checks and excessive code, consuming some extra gas. This is intentional. 
-// Even though the contract should work without these parts, they make the code more secure in production and for future refactoring.
-// Also, they show more clearly what we have considered and addressed during development.
-// Discussion is welcome!
-// ====
-//
-
-/// @author ethernian
-/// @notice report bugs to: bugs@ethernian.com
-/// @title Presale Contract
+// Presale Smart Contract
+//
+// **** START:  WORK IN PROGRESS DISCLAIMER ****
+// This is a work in progress and not intended for reuse.
+// So don't reuse unless you know exactly what are you doing! 
+// **** END:  WORK IN PROGRESS DISCLAIMER ****
+//
+// **** START:  PARANOIA DISCLAIMER ****
+// A careful reader will find here some unnecessary checks and excessive code consuming some extra valuable gas. It is intentionally. 
+// Even contract will works without these parts, they make the code more secure in production as well for future refactoring.
+// Additionally it shows more clearly what we have took care of.
+// You are welcome to discuss that places.
+// **** END OF: PARANOIA DISCLAIMER *****
+//
+//
+// @author ethernian
+//
 
 contract Presale {
 
-    string public constant VERSION = "0.1.4-beta";
-
-    /* ====== configuration START ====== */
-
-    uint public constant PRESALE_START  = 3142163; /* approx. 08.02.2017 00:00 */
-    uint public constant PRESALE_END    = 3145693; /* approx. 08.02.2017 23:59 */
-    uint public constant WITHDRAWAL_END = 3151453; /* approx. 09.02.2017 23:59 */
-
-
-    address public constant OWNER = 0x45d5426471D12b21C3326dD0cF96f6656F7d14b1;
-
+    string public constant VERSION = "0.1.3-beta";
+
+	/* ====== configuration START ====== */
+
+	uint public constant PRESALE_START  = 3044593;    /* approx. 22.01.2017 20:00 CET */
+	uint public constant PRESALE_END    = 3048913;    /* approx. 23.01.2017 14:00 CET */
+	uint public constant WITHDRAWAL_END = 3049873;    /* approx. 23.01.2017 18:00 CET */
+
+	address public constant OWNER = 0x45d5426471D12b21C3326dD0cF96f6656F7d14b1;
+	
     uint public constant MIN_TOTAL_AMOUNT_TO_RECEIVE_ETH = 1;
     uint public constant MAX_TOTAL_AMOUNT_TO_RECEIVE_ETH = 5;
     uint public constant MIN_ACCEPTED_AMOUNT_FINNEY = 1;
 
     /* ====== configuration END ====== */
-
+	
     string[5] private stateNames = ["BEFORE_START",  "PRESALE_RUNNING", "WITHDRAWAL_RUNNING", "REFUND_RUNNING", "CLOSED" ];
     enum State { BEFORE_START,  PRESALE_RUNNING, WITHDRAWAL_RUNNING, REFUND_RUNNING, CLOSED }
 
     uint public total_received_amount;
-    mapping (address => uint) public balances;
-
+	mapping (address => uint) public balances;
+	
     uint private constant MIN_TOTAL_AMOUNT_TO_RECEIVE = MIN_TOTAL_AMOUNT_TO_RECEIVE_ETH * 1 ether;
     uint private constant MAX_TOTAL_AMOUNT_TO_RECEIVE = MAX_TOTAL_AMOUNT_TO_RECEIVE_ETH * 1 ether;
     uint private constant MIN_ACCEPTED_AMOUNT = MIN_ACCEPTED_AMOUNT_FINNEY * 1 finney;
-    bool public isAborted = false;
-
+	
 
     //constructor
     function Presale () validSetupOnly() { }
@@ -97,15 +84,11 @@
     noReentrancy
     {
         // transfer funds to owner if any
-        if (!OWNER.send(this.balance)) throw;
-    }
-
-    function abort() external
-    inStateBefore(State.REFUND_RUNNING)
-    onlyOwner
-    {
-        isAborted = true;
-    }
+        if (this.balance > 0) {
+            if (!OWNER.send(this.balance)) throw;
+        }
+    }
+
 
     //displays current contract state in human readable form
     function state()  external constant
@@ -148,21 +131,17 @@
 
 
     function currentState() private constant returns (State) {
-        if (isAborted) {
-            return this.balance > 0 
-                   ? State.REFUND_RUNNING 
-                   : State.CLOSED;
-        } else if (block.number < PRESALE_START) {
+        if (block.number < PRESALE_START) {
             return State.BEFORE_START;
         } else if (block.number <= PRESALE_END && total_received_amount < MAX_TOTAL_AMOUNT_TO_RECEIVE) {
             return State.PRESALE_RUNNING;
-        } else if (this.balance == 0) {
-            return State.CLOSED;
         } else if (block.number <= WITHDRAWAL_END && total_received_amount >= MIN_TOTAL_AMOUNT_TO_RECEIVE) {
             return State.WITHDRAWAL_RUNNING;
+        } else if (this.balance > 0){
+            return State.REFUND_RUNNING;
         } else {
-            return State.REFUND_RUNNING;
-        } 
+            return State.CLOSED;		
+		} 
     }
 
     //
@@ -175,11 +154,6 @@
         _;
     }
 
-    //fails if the current state is not before than the given one.
-    modifier inStateBefore(State state) {
-        if (currentState() >= state) throw;
-        _;
-    }
 
     //fails if something in setup is looking weird
     modifier validSetupOnly() {
@@ -191,15 +165,15 @@
             || PRESALE_START >= PRESALE_END
             || PRESALE_END   >= WITHDRAWAL_END
             || MIN_TOTAL_AMOUNT_TO_RECEIVE > MAX_TOTAL_AMOUNT_TO_RECEIVE )
-                throw;
+				throw;
         _;
     }
 
 
     //accepts calls from owner only
     modifier onlyOwner(){
-        if (msg.sender != OWNER)  throw;
-        _;
+    	if (msg.sender != OWNER)  throw;
+    	_;
     }
 
 
