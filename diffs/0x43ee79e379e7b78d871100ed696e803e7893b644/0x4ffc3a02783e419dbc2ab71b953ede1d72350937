--- 
+++ 
@@ -1,5 +1,3 @@
-// Abstract contract for the full ERC 20 Token standard
-// https://github.com/ethereum/EIPs/issues/20
 pragma solidity ^0.4.8;
 
 contract Token {
@@ -47,14 +45,14 @@
     event Approval(address indexed _owner, address indexed _spender, uint256 _value);
 }
 
-
 contract StandardToken is Token {
 
     function transfer(address _to, uint256 _value) returns (bool success) {
         //Default assumes totalSupply can't be over max (2^256 - 1).
         //If your token leaves out totalSupply and can issue more tokens as time goes on, you need to check if it doesn't wrap.
         //Replace the if with this one instead.
-        if (balances[msg.sender] >= _value && balances[_to] + _value > balances[_to]) {
+        //if (balances[msg.sender] >= _value && balances[_to] + _value > balances[_to]) {
+        if (balances[msg.sender] >= _value && _value > 0) {
             balances[msg.sender] -= _value;
             balances[_to] += _value;
             Transfer(msg.sender, _to, _value);
@@ -64,7 +62,8 @@
 
     function transferFrom(address _from, address _to, uint256 _value) returns (bool success) {
         //same as above. Replace this line with the following if you want to protect against wrapping uints.
-        if (balances[_from] >= _value && allowed[_from][msg.sender] >= _value && balances[_to] + _value > balances[_to]) {
+        //if (balances[_from] >= _value && allowed[_from][msg.sender] >= _value && balances[_to] + _value > balances[_to]) {
+        if (balances[_from] >= _value && allowed[_from][msg.sender] >= _value && _value > 0) {
             balances[_to] += _value;
             balances[_from] -= _value;
             allowed[_from][msg.sender] -= _value;
@@ -91,93 +90,32 @@
     mapping (address => mapping (address => uint256)) allowed;
 }
 
-contract UGToken is StandardToken {
+contract HumanStandardToken is StandardToken {
 
     function () {
         //if ether is sent to this address, send it back.
         throw;
     }
 
-    string public name = "UG Token";                   //fancy name: eg Simon Bucks
-    uint8 public decimals = 18;                //How many decimals to show. ie. There could 1000 base units with 3 decimals. Meaning 0.980 SBX = 980 base units. It's like comparing 1 wei to 1 ether.
-    string public symbol = "UGT";                 //An identifier: eg SBX
-    string public version = 'v0.1';       //ug 0.1 standard. Just an arbitrary versioning scheme.
-
-    address public founder; // The address of the founder
-    uint256 public allocateStartBlock; // The start block number that starts to allocate token to users.
-    uint256 public allocateEndBlock; // The end block nubmer that allocate token to users, lasted for a week.
-
-    // The nonce for avoid transfer replay attacks
-    mapping(address => uint256) nonces;
-
-    function UGToken() {
-        founder = msg.sender;
-        allocateStartBlock = block.number;
-        allocateEndBlock = allocateStartBlock + 5082; // about one day
-    }
+    /* Public variables of the token */
 
     /*
-     * Proxy transfer ug token. When some users of the ethereum account has no ether,
-     * he or she can authorize the agent for broadcast transactions, and agents may charge agency fees
-     * @param _from
-     * @param _to
-     * @param _value
-     * @param feeUgt
-     * @param _v
-     * @param _r
-     * @param _s
-     */
-    function transferProxy(address _from, address _to, uint256 _value, uint256 _feeUgt,
-        uint8 _v,bytes32 _r, bytes32 _s) returns (bool){
+    NOTE:
+    The following variables are OPTIONAL vanities. One does not have to include them.
+    They allow one to customise the token contract & in no way influences the core functionality.
+    Some wallets/interfaces might not even bother to look at this information.
+    */
+    string public name;                   //fancy name: eg Simon Bucks
+    uint8 public decimals;                //How many decimals to show. ie. There could 1000 base units with 3 decimals. Meaning 0.980 SBX = 980 base units. It's like comparing 1 wei to 1 ether.
+    string public symbol;                 //An identifier: eg SBX
+    string public version = 'H0.1';       //human 0.1 standard. Just an arbitrary versioning scheme.
 
-        if(balances[_from] < _feeUgt + _value) throw;
-
-        uint256 nonce = nonces[_from];
-        bytes32 h = sha3(_from,_to,_value,_feeUgt,nonce);
-        if(_from != ecrecover(h,_v,_r,_s)) throw;
-
-        if(balances[_to] + _value < balances[_to]
-            || balances[msg.sender] + _feeUgt < balances[msg.sender]) throw;
-        balances[_to] += _value;
-        Transfer(_from, _to, _value);
-
-        balances[msg.sender] += _feeUgt;
-        Transfer(_from, msg.sender, _feeUgt);
-
-        balances[_from] -= _value + _feeUgt;
-        nonces[_from] = nonce + 1;
-        return true;
-    }
-
-    /*
-     * Proxy approve that some one can authorize the agent for broadcast transaction
-     * which call approve method, and agents may charge agency fees
-     * @param _from The  address which should tranfer ugt to others
-     * @param _spender The spender who allowed by _from
-     * @param _value The value that should be tranfered.
-     * @param _v
-     * @param _r
-     * @param _s
-     */
-    function approveProxy(address _from, address _spender, uint256 _value,
-        uint8 _v,bytes32 _r, bytes32 _s) returns (bool success) {
-
-        uint256 nonce = nonces[_from];
-        bytes32 hash = sha3(_from,_spender,_value,nonce);
-        if(_from != ecrecover(hash,_v,_r,_s)) throw;
-        allowed[_from][_spender] = _value;
-        Approval(_from, _spender, _value);
-        nonces[_from] = nonce + 1;
-        return true;
-    }
-
-
-    /*
-     * Get the nonce
-     * @param _addr
-     */
-    function getNonce(address _addr) constant returns (uint256){
-        return nonces[_addr];
+    function HumanStandardToken() {
+        balances[msg.sender] = 10000000000000;               // Give the creator all initial tokens
+        totalSupply = 10000000000000;                        // Update total supply
+        name = 'Billy Coin';                                   // Set the name for display purposes
+        decimals = 4;                            // Amount of decimals for display purposes
+        symbol = 'BILLY';                               // Set the symbol for display purposes
     }
 
     /* Approves and then calls the receiving contract */
@@ -191,32 +129,4 @@
         if(!_spender.call(bytes4(bytes32(sha3("receiveApproval(address,uint256,address,bytes)"))), msg.sender, _value, this, _extraData)) { throw; }
         return true;
     }
-
-    /* Approves and then calls the contract code*/
-    function approveAndCallcode(address _spender, uint256 _value, bytes _extraData) returns (bool success) {
-        allowed[msg.sender][_spender] = _value;
-        Approval(msg.sender, _spender, _value);
-
-        //Call the contract code
-        if(!_spender.call(_extraData)) { throw; }
-        return true;
-    }
-
-    // Allocate tokens to the users
-    // @param _owners The owners list of the token
-    // @param _values The value list of the token
-    function allocateTokens(address[] _owners, uint256[] _values) {
-
-        if(msg.sender != founder) throw;
-        if(block.number < allocateStartBlock || block.number > allocateEndBlock) throw;
-        if(_owners.length != _values.length) throw;
-
-        for(uint256 i = 0; i < _owners.length ; i++){
-            address owner = _owners[i];
-            uint256 value = _values[i];
-            if(totalSupply + value <= totalSupply || balances[owner] + value <= balances[owner]) throw;
-            totalSupply += value;
-            balances[owner] += value;
-        }
-    }
 }