--- 
+++ 
@@ -1,163 +1,198 @@
-pragma solidity ^0.4.6;
+pragma solidity ^0.4.8;
 
-library SafeMath {
-  function mul(uint a, uint b) internal returns (uint) {
+
+contract SafeMath {
+
+  function assert(bool assertion) internal {
+    if (!assertion) throw;
+  }
+
+  function safeMul(uint a, uint b) internal returns (uint) {
     uint c = a * b;
     assert(a == 0 || c / a == b);
     return c;
   }
 
-  function div(uint a, uint b) internal returns (uint) {
-    // assert(b > 0); // Solidity automatically throws when dividing by 0
+  function safeDiv(uint a, uint b) internal returns (uint) {
+    assert(b > 0);
     uint c = a / b;
-    // assert(a == b * c + a % b); // There is no case in which this doesn't hold
+    assert(a == b * c + a % b);
     return c;
-  }
-
-  function sub(uint a, uint b) internal returns (uint) {
-    assert(b <= a);
-    return a - b;
-  }
-
-  function add(uint a, uint b) internal returns (uint) {
-    uint c = a + b;
-    assert(c >= a);
-    return c;
-  }
-
-  function max64(uint64 a, uint64 b) internal constant returns (uint64) {
-    return a >= b ? a : b;
-  }
-
-  function min64(uint64 a, uint64 b) internal constant returns (uint64) {
-    return a < b ? a : b;
-  }
-
-  function max256(uint256 a, uint256 b) internal constant returns (uint256) {
-    return a >= b ? a : b;
-  }
-
-  function min256(uint256 a, uint256 b) internal constant returns (uint256) {
-    return a < b ? a : b;
-  }
-
-  function assert(bool assertion) internal {
-    if (!assertion) {
-      throw;
-    }
-  }
-}
-
-contract ERC20Basic {
-  uint public totalSupply;
-  function balanceOf(address who) constant returns (uint);
-  function transfer(address to, uint value);
-  event Transfer(address indexed from, address indexed to, uint value);
-}
-
-contract ERC20 is ERC20Basic {
-  function allowance(address owner, address spender) constant returns (uint);
-  function transferFrom(address from, address to, uint value);
-  function approve(address spender, uint value);
-  event Approval(address indexed owner, address indexed spender, uint value);
-}
-
-contract BasicToken is ERC20Basic {
-  using SafeMath for uint;
-
-  mapping(address => uint) balances;
-
-  modifier onlyPayloadSize(uint size) {
-     if(msg.data.length < size + 4) {
-       throw;
-     }
-     _;
-  }
-
-  /**
-  * @dev transfer token for a specified address
-  * @param _to The address to transfer to.
-  * @param _value The amount to be transferred.
-  */
-  function transfer(address _to, uint _value) onlyPayloadSize(2 * 32) {
-    balances[msg.sender] = balances[msg.sender].sub(_value);
-    balances[_to] = balances[_to].add(_value);
-    Transfer(msg.sender, _to, _value);
-  }
-
-  /**
-  * @dev Gets the balance of the specified address.
-  * @param _owner The address to query the the balance of. 
-  * @return An uint representing the amount owned by the passed address.
-  */
-  function balanceOf(address _owner) constant returns (uint balance) {
-    return balances[_owner];
   }
 
 }
 
-contract StandardToken is BasicToken, ERC20 {
 
-  mapping (address => mapping (address => uint)) allowed;
+contract StandardTokenProtocol {
 
+    function totalSupply() constant returns (uint256 totalSupply) {}
+    function balanceOf(address _owner) constant returns (uint256 balance) {}
+    function transfer(address _recipient, uint256 _value) returns (bool success) {}
+    function transferFrom(address _from, address _recipient, uint256 _value) returns (bool success) {}
+    function approve(address _spender, uint256 _value) returns (bool success) {}
+    function allowance(address _owner, address _spender) constant returns (uint256 remaining) {}
 
-  /**
-   * @dev Transfer tokens from one address to another
-   * @param _from address The address which you want to send tokens from
-   * @param _to address The address which you want to transfer to
-   * @param _value uint the amout of tokens to be transfered
-   */
-  function transferFrom(address _from, address _to, uint _value) onlyPayloadSize(3 * 32) {
-    var _allowance = allowed[_from][msg.sender];
-
-    // Check is not needed because sub(_allowance, _value) will already throw if this condition is not met
-    // if (_value > _allowance) throw;
-
-    balances[_to] = balances[_to].add(_value);
-    balances[_from] = balances[_from].sub(_value);
-    allowed[_from][msg.sender] = _allowance.sub(_value);
-    Transfer(_from, _to, _value);
-  }
-
-  /**
-   * @dev Aprove the passed address to spend the specified amount of tokens on beahlf of msg.sender.
-   * @param _spender The address which will spend the funds.
-   * @param _value The amount of tokens to be spent.
-   */
-  function approve(address _spender, uint _value) {
-
-    // To change the approve amount you first have to reduce the addresses`
-    //  allowance to zero by calling `approve(_spender, 0)` if it is not
-    //  already 0 to mitigate the race condition described here:
-    //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729
-    if ((_value != 0) && (allowed[msg.sender][_spender] != 0)) throw;
-
-    allowed[msg.sender][_spender] = _value;
-    Approval(msg.sender, _spender, _value);
-  }
-
-  /**
-   * @dev Function to check the amount of tokens than an owner allowed to a spender.
-   * @param _owner address The address which owns the funds.
-   * @param _spender address The address which will spend the funds.
-   * @return A uint specifing the amount of tokens still avaible for the spender.
-   */
-  function allowance(address _owner, address _spender) constant returns (uint remaining) {
-    return allowed[_owner][_spender];
-  }
+    event Transfer(address indexed _from, address indexed _recipient, uint256 _value);
+    event Approval(address indexed _owner, address indexed _spender, uint256 _value);
 
 }
 
-contract SimpleToken is StandardToken {
 
-  string public name = "Retcoin";
-  string public symbol = "RET";
-  uint public decimals = 3;
-  uint public INITIAL_SUPPLY = 100000000000;
+contract StandardToken is StandardTokenProtocol {
 
-  function SimpleToken() {
-    totalSupply = INITIAL_SUPPLY;
-    balances[msg.sender] = INITIAL_SUPPLY;
-  }
+    modifier when_can_transfer(address _from, uint256 _value) {
+        if (balances[_from] >= _value) _;
+    }
 
+    modifier when_can_receive(address _recipient, uint256 _value) {
+        if (balances[_recipient] + _value > balances[_recipient]) _;
+    }
+
+    modifier when_is_allowed(address _from, address _delegate, uint256 _value) {
+        if (allowed[_from][_delegate] >= _value) _;
+    }
+
+    function transfer(address _recipient, uint256 _value)
+        when_can_transfer(msg.sender, _value)
+        when_can_receive(_recipient, _value)
+        returns (bool o_success)
+    {
+        balances[msg.sender] -= _value;
+        balances[_recipient] += _value;
+        Transfer(msg.sender, _recipient, _value);
+        return true;
+    }
+
+    function transferFrom(address _from, address _recipient, uint256 _value)
+        when_can_transfer(_from, _value)
+        when_can_receive(_recipient, _value)
+        when_is_allowed(_from, msg.sender, _value)
+        returns (bool o_success)
+    {
+        allowed[_from][msg.sender] -= _value;
+        balances[_from] -= _value;
+        balances[_recipient] += _value;
+        Transfer(_from, _recipient, _value);
+        return true;
+    }
+
+    function balanceOf(address _owner) constant returns (uint256 balance) {
+        return balances[_owner];
+    }
+
+    function approve(address _spender, uint256 _value) returns (bool o_success) {
+        allowed[msg.sender][_spender] = _value;
+        Approval(msg.sender, _spender, _value);
+        return true;
+    }
+
+    function allowance(address _owner, address _spender) constant returns (uint256 o_remaining) {
+        return allowed[_owner][_spender];
+    }
+
+    mapping (address => uint256) balances;
+    mapping (address => mapping (address => uint256)) allowed;
+    uint256 public totalSupply;
+
+}
+
+contract GUPToken is StandardToken {
+
+	//FIELDS
+	string public name = "Guppy";
+    string public symbol = "GUP";
+    uint public decimals = 3;
+
+	//CONSTANTS
+	uint public constant LOCKOUT_PERIOD = 1 years; //time after end date that illiquid GUP can be transferred
+
+	//ASSIGNED IN INITIALIZATION
+	uint public endMintingTime; //Timestamp after which no more tokens can be created
+	address public minter; //address of the account which may mint new tokens
+
+	mapping (address => uint) public illiquidBalance; //Balance of 'Frozen funds'
+
+	//MODIFIERS
+	//Can only be called by contribution contract.
+	modifier only_minter {
+		if (msg.sender != minter) throw;
+		_;
+	}
+
+	// Can only be called if illiquid tokens may be transformed into liquid.
+	// This happens when `LOCKOUT_PERIOD` of time passes after `endMintingTime`.
+	modifier when_thawable {
+		if (now < endMintingTime + LOCKOUT_PERIOD) throw;
+		_;
+	}
+
+	// Can only be called if (liquid) tokens may be transferred. Happens
+	// immediately after `endMintingTime`.
+	modifier when_transferable {
+		if (now < endMintingTime) throw;
+		_;
+	}
+
+	// Can only be called if the `crowdfunder` is allowed to mint tokens. Any
+	// time before `endMintingTime`.
+	modifier when_mintable {
+		if (now >= endMintingTime) throw;
+		_;
+	}
+
+	// Initialization contract assigns address of crowdfund contract and end time.
+	function GUPToken(address _minter, uint _endMintingTime) {
+		endMintingTime = _endMintingTime;
+		minter = _minter;
+	}
+
+	// Create new tokens when called by the crowdfund contract.
+	// Only callable before the end time.
+	function createToken(address _recipient, uint _value)
+		when_mintable
+		only_minter
+		returns (bool o_success)
+	{
+		balances[_recipient] += _value;
+		totalSupply += _value;
+		return true;
+	}
+
+	// Create an illiquidBalance which cannot be traded until end of lockout period.
+	// Can only be called by crowdfund contract before the end time.
+	function createIlliquidToken(address _recipient, uint _value)
+		when_mintable
+		only_minter
+		returns (bool o_success)
+	{
+		illiquidBalance[_recipient] += _value;
+		totalSupply += _value;
+		return true;
+	}
+
+	// Make sender's illiquid balance liquid when called after lockout period.
+	function makeLiquid()
+		when_thawable
+	{
+		balances[msg.sender] += illiquidBalance[msg.sender];
+		illiquidBalance[msg.sender] = 0;
+	}
+
+	// Transfer amount of tokens from sender account to recipient.
+	// Only callable after the crowd fund end date.
+	function transfer(address _recipient, uint _amount)
+		when_transferable
+		returns (bool o_success)
+	{
+		return super.transfer(_recipient, _amount);
+	}
+
+	// Transfer amount of tokens from a specified address to a recipient.
+	// Only callable after the crowd fund end date.
+	function transferFrom(address _from, address _recipient, uint _amount)
+		when_transferable
+		returns (bool o_success)
+	{
+		return super.transferFrom(_from, _recipient, _amount);
+	}
 }