--- 
+++ 
@@ -1,194 +1,198 @@
-//
-/* SunContract Token Smart Contract v1.0 */   
-//
+pragma solidity ^0.4.8;
 
-contract owned {
 
-  address public owner;
+contract SafeMath {
 
-  function owned() {
-    owner = msg.sender;
+  function assert(bool assertion) internal {
+    if (!assertion) throw;
   }
 
-  modifier onlyOwner {
-    if (msg.sender != owner) throw;
-    _;
+  function safeMul(uint a, uint b) internal returns (uint) {
+    uint c = a * b;
+    assert(a == 0 || c / a == b);
+    return c;
   }
 
-  function transferOwnership(address newOwner) onlyOwner {
-    owner = newOwner;
+  function safeDiv(uint a, uint b) internal returns (uint) {
+    assert(b > 0);
+    uint c = a / b;
+    assert(a == b * c + a % b);
+    return c;
   }
+
 }
 
-contract tokenRecipient { 
-  function receiveApproval(address _from, uint256 _value, address _token, bytes _extraData);
-} 
 
-contract IERC20Token {
+contract StandardTokenProtocol {
 
-  /// @return total amount of tokens
-  function totalSupply() constant returns (uint256 totalSupply);
+    function totalSupply() constant returns (uint256 totalSupply) {}
+    function balanceOf(address _owner) constant returns (uint256 balance) {}
+    function transfer(address _recipient, uint256 _value) returns (bool success) {}
+    function transferFrom(address _from, address _recipient, uint256 _value) returns (bool success) {}
+    function approve(address _spender, uint256 _value) returns (bool success) {}
+    function allowance(address _owner, address _spender) constant returns (uint256 remaining) {}
 
-  /// @param _owner The address from which the balance will be retrieved
-  /// @return The balance
-  function balanceOf(address _owner) constant returns (uint256 balance) {}
+    event Transfer(address indexed _from, address indexed _recipient, uint256 _value);
+    event Approval(address indexed _owner, address indexed _spender, uint256 _value);
 
-  /// @notice send `_value` token to `_to` from `msg.sender`
-  /// @param _to The address of the recipient
-  /// @param _value The amount of tokens to be transferred
-  /// @return Whether the transfer was successful or not
-  function transfer(address _to, uint256 _value) returns (bool success) {}
+}
 
-  /// @notice send `_value` token to `_to` from `_from` on the condition it is approved by `_from`
-  /// @param _from The address of the sender
-  /// @param _to The address of the recipient
-  /// @param _value The amount of token to be transferred
-  /// @return Whether the transfer was successful or not
-  function transferFrom(address _from, address _to, uint256 _value) returns (bool success) {}
 
-  /// @notice `msg.sender` approves `_addr` to spend `_value` tokens
-  /// @param _spender The address of the account able to transfer the tokens
-  /// @param _value The amount of wei to be approved for transfer
-  /// @return Whether the approval was successful or not
-  function approve(address _spender, uint256 _value) returns (bool success) {}
+contract StandardToken is StandardTokenProtocol {
 
-  /// @param _owner The address of the account owning tokens
-  /// @param _spender The address of the account able to transfer the tokens
-  /// @return Amount of remaining tokens allowed to spent
-  function allowance(address _owner, address _spender) constant returns (uint256 remaining) {}
+    modifier when_can_transfer(address _from, uint256 _value) {
+        if (balances[_from] >= _value) _;
+    }
 
-  event Transfer(address indexed _from, address indexed _to, uint256 _value);
-  event Approval(address indexed _owner, address indexed _spender, uint256 _value);
-} 
+    modifier when_can_receive(address _recipient, uint256 _value) {
+        if (balances[_recipient] + _value > balances[_recipient]) _;
+    }
 
-contract SunContractToken is IERC20Token, owned{
+    modifier when_is_allowed(address _from, address _delegate, uint256 _value) {
+        if (allowed[_from][_delegate] >= _value) _;
+    }
 
-  /* Public variables of the token */
-  string public standard = "SunContract token v1.0";
-  string public name = "SunContract";
-  string public symbol = "SNC";
-  uint8 public decimals = 18;
-  address public icoContractAddress;
-  uint256 public tokenFrozenUntilBlock;
+    function transfer(address _recipient, uint256 _value)
+        when_can_transfer(msg.sender, _value)
+        when_can_receive(_recipient, _value)
+        returns (bool o_success)
+    {
+        balances[msg.sender] -= _value;
+        balances[_recipient] += _value;
+        Transfer(msg.sender, _recipient, _value);
+        return true;
+    }
 
-  /* Private variables of the token */
-  uint256 supply = 0;
-  mapping (address => uint256) balances;
-  mapping (address => mapping (address => uint256)) allowances;
-  mapping (address => bool) restrictedAddresses;
+    function transferFrom(address _from, address _recipient, uint256 _value)
+        when_can_transfer(_from, _value)
+        when_can_receive(_recipient, _value)
+        when_is_allowed(_from, msg.sender, _value)
+        returns (bool o_success)
+    {
+        allowed[_from][msg.sender] -= _value;
+        balances[_from] -= _value;
+        balances[_recipient] += _value;
+        Transfer(_from, _recipient, _value);
+        return true;
+    }
 
-  /* Events */
-  event Mint(address indexed _to, uint256 _value);
-  event Burn(address indexed _from, uint256 _value);
-  event TokenFrozen(uint256 _frozenUntilBlock, string _reason);
+    function balanceOf(address _owner) constant returns (uint256 balance) {
+        return balances[_owner];
+    }
 
-  /* Initializes contract and  sets restricted addresses */
-  function SunContractToken(address _icoAddress) {
-    restrictedAddresses[0x0] = true;
-    restrictedAddresses[_icoAddress] = true;
-    restrictedAddresses[address(this)] = true;
-    icoContractAddress = _icoAddress;
-  }
+    function approve(address _spender, uint256 _value) returns (bool o_success) {
+        allowed[msg.sender][_spender] = _value;
+        Approval(msg.sender, _spender, _value);
+        return true;
+    }
 
-  /* Returns total supply of issued tokens */
-  function totalSupply() constant returns (uint256 totalSupply) {
-    return supply;
-  }
+    function allowance(address _owner, address _spender) constant returns (uint256 o_remaining) {
+        return allowed[_owner][_spender];
+    }
 
-  /* Returns balance of address */
-  function balanceOf(address _owner) constant returns (uint256 balance) {
-    return balances[_owner];
-  }
+    mapping (address => uint256) balances;
+    mapping (address => mapping (address => uint256)) allowed;
+    uint256 public totalSupply;
 
-  /* Transfers tokens from your address to other */
-  function transfer(address _to, uint256 _value) returns (bool success) {
-    if (block.number < tokenFrozenUntilBlock) throw;    // Throw if token is frozen
-    if (restrictedAddresses[_to]) throw;                // Throw if recipient is restricted address
-    if (balances[msg.sender] < _value) throw;           // Throw if sender has insufficient balance
-    if (balances[_to] + _value < balances[_to]) throw;  // Throw if owerflow detected
-    balances[msg.sender] -= _value;                     // Deduct senders balance
-    balances[_to] += _value;                            // Add recivers blaance 
-    Transfer(msg.sender, _to, _value);                  // Raise Transfer event
-    return true;
-  }
+}
 
-  /* Approve other address to spend tokens on your account */
-  function approve(address _spender, uint256 _value) returns (bool success) {
-    if (block.number < tokenFrozenUntilBlock) throw;    // Throw if token is frozen        
-    allowances[msg.sender][_spender] = _value;          // Set allowance         
-    Approval(msg.sender, _spender, _value);             // Raise Approval event         
-    return true;
-  }
+contract GUPToken is StandardToken {
 
-  /* Approve and then communicate the approved contract in a single tx */ 
-  function approveAndCall(address _spender, uint256 _value, bytes _extraData) returns (bool success) {            
-    tokenRecipient spender = tokenRecipient(_spender);              // Cast spender to tokenRecipient contract         
-    approve(_spender, _value);                                      // Set approval to contract for _value         
-    spender.receiveApproval(msg.sender, _value, this, _extraData);  // Raise method on _spender contract         
-    return true;     
-  }     
+	//FIELDS
+	string public name = "Guppy";
+    string public symbol = "GUP";
+    uint public decimals = 3;
 
-  /* A contract attempts to get the coins */
-  function transferFrom(address _from, address _to, uint256 _value) returns (bool success) {      
-    if (block.number < tokenFrozenUntilBlock) throw;    // Throw if token is frozen
-    if (restrictedAddresses[_to]) throw;                // Throw if recipient is restricted address  
-    if (balances[_from] < _value) throw;                // Throw if sender does not have enough balance     
-    if (balances[_to] + _value < balances[_to]) throw;  // Throw if overflow detected    
-    if (_value > allowances[_from][msg.sender]) throw;  // Throw if you do not have allowance       
-    balances[_from] -= _value;                          // Deduct senders balance    
-    balances[_to] += _value;                            // Add recipient blaance         
-    allowances[_from][msg.sender] -= _value;            // Deduct allowance for this address         
-    Transfer(_from, _to, _value);                       // Raise Transfer event
-    return true;     
-  }         
+	//CONSTANTS
+	uint public constant LOCKOUT_PERIOD = 1 years; //time after end date that illiquid GUP can be transferred
 
-  /* Get the amount of allowed tokens to spend */     
-  function allowance(address _owner, address _spender) constant returns (uint256 remaining) {         
-    return allowances[_owner][_spender];
-  }         
+	//ASSIGNED IN INITIALIZATION
+	uint public endMintingTime; //Timestamp after which no more tokens can be created
+	address public minter; //address of the account which may mint new tokens
 
-  /* Issue new tokens */     
-  function mintTokens(address _to, uint256 _amount) {         
-    if (msg.sender != icoContractAddress) throw;            // Only ICO address can mint tokens        
-    if (restrictedAddresses[_to]) throw;                    // Throw if user wants to send to restricted address       
-    if (balances[_to] + _amount < balances[_to]) throw;     // Check for overflows
-    supply += _amount;                                      // Update total supply
-    balances[_to] += _amount;                               // Set minted coins to target
-    Mint(_to, _amount);                                     // Create Mint event       
-    Transfer(0x0, _to, _amount);                            // Create Transfer event from 0x
-  }     
-  
-  /* Destroy tokens from owners account */
-  function burnTokens(uint256 _amount) onlyOwner {
-    if(balances[msg.sender] < _amount) throw;               // Throw if you do not have enough balance
-    if(supply < _amount) throw;                             // Throw if overflow detected
+	mapping (address => uint) public illiquidBalance; //Balance of 'Frozen funds'
 
-    supply -= _amount;                                      // Deduct totalSupply
-    balances[msg.sender] -= _amount;                        // Destroy coins on senders wallet
-    Burn(msg.sender, _amount);                              // Raise Burn event
-    Transfer(msg.sender, 0x0, _amount);                     // Raise transfer to 0x0
-  }
+	//MODIFIERS
+	//Can only be called by contribution contract.
+	modifier only_minter {
+		if (msg.sender != minter) throw;
+		_;
+	}
 
-  /* Stops all token transfers in case of emergency */
-  function freezeTransfersUntil(uint256 _frozenUntilBlock, string _reason) onlyOwner {      
-    tokenFrozenUntilBlock = _frozenUntilBlock;
-    TokenFrozen(_frozenUntilBlock, _reason);
-  }
+	// Can only be called if illiquid tokens may be transformed into liquid.
+	// This happens when `LOCKOUT_PERIOD` of time passes after `endMintingTime`.
+	modifier when_thawable {
+		if (now < endMintingTime + LOCKOUT_PERIOD) throw;
+		_;
+	}
 
-  function isRestrictedAddress(address _querryAddress) constant returns (bool answer){
-    return restrictedAddresses[_querryAddress];
-  }
+	// Can only be called if (liquid) tokens may be transferred. Happens
+	// immediately after `endMintingTime`.
+	modifier when_transferable {
+		if (now < endMintingTime) throw;
+		_;
+	}
 
-  //
-  /* This part is here only for testing and will not be included into final version */
-  //
+	// Can only be called if the `crowdfunder` is allowed to mint tokens. Any
+	// time before `endMintingTime`.
+	modifier when_mintable {
+		if (now >= endMintingTime) throw;
+		_;
+	}
 
-  //function changeICOAddress(address _newAddress) onlyOwner{
-  //  icoContractAddress = _newAddress;
-  //  restrictedAddresses[_newAddress] = true;   
-  //}
+	// Initialization contract assigns address of crowdfund contract and end time.
+	function GUPToken(address _minter, uint _endMintingTime) {
+		endMintingTime = _endMintingTime;
+		minter = _minter;
+	}
 
-  //function killContract() onlyOwner{
-  //  selfdestruct(msg.sender);
-  //}
+	// Create new tokens when called by the crowdfund contract.
+	// Only callable before the end time.
+	function createToken(address _recipient, uint _value)
+		when_mintable
+		only_minter
+		returns (bool o_success)
+	{
+		balances[_recipient] += _value;
+		totalSupply += _value;
+		return true;
+	}
+
+	// Create an illiquidBalance which cannot be traded until end of lockout period.
+	// Can only be called by crowdfund contract before the end time.
+	function createIlliquidToken(address _recipient, uint _value)
+		when_mintable
+		only_minter
+		returns (bool o_success)
+	{
+		illiquidBalance[_recipient] += _value;
+		totalSupply += _value;
+		return true;
+	}
+
+	// Make sender's illiquid balance liquid when called after lockout period.
+	function makeLiquid()
+		when_thawable
+	{
+		balances[msg.sender] += illiquidBalance[msg.sender];
+		illiquidBalance[msg.sender] = 0;
+	}
+
+	// Transfer amount of tokens from sender account to recipient.
+	// Only callable after the crowd fund end date.
+	function transfer(address _recipient, uint _amount)
+		when_transferable
+		returns (bool o_success)
+	{
+		return super.transfer(_recipient, _amount);
+	}
+
+	// Transfer amount of tokens from a specified address to a recipient.
+	// Only callable after the crowd fund end date.
+	function transferFrom(address _from, address _recipient, uint _amount)
+		when_transferable
+		returns (bool o_success)
+	{
+		return super.transferFrom(_from, _recipient, _amount);
+	}
 }