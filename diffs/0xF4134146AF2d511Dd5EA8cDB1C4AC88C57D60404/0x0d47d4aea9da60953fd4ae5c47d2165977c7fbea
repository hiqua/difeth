--- 
+++ 
@@ -1,194 +1,221 @@
-//
-/* SunContract Token Smart Contract v1.0 */   
-//
-
-contract owned {
-
-  address public owner;
-
-  function owned() {
-    owner = msg.sender;
-  }
-
-  modifier onlyOwner {
-    if (msg.sender != owner) throw;
-    _;
-  }
-
-  function transferOwnership(address newOwner) onlyOwner {
-    owner = newOwner;
-  }
+/// @title The main smart contract for Etherprises LLC, Delaware, U.S. (c)2017 Etherprises LLC
+/// @author Ville Sundell <contact@etherprises.com>
+// This source code is available at https://etherscan.io/address/0x0d47d4aea9da60953fd4ae5c47d2165977c7fbea
+// This code (and only this source code, not storage data nor other information/data) is released under CC-0.
+// More source regarding Etherprises LLC can be found at: https://github.com/Etherprises
+// The legal prose amending the contract between your series and Etherprises LLC is defined in prose() as a string array
+
+pragma solidity ^0.4.9;
+
+//This is the main contract, this handles series creation and renewal:
+contract EtherprisesLLC {
+    //This factory will create the series smart contract:
+    address public seriesFactory;
+    //This is the address of the only member or the series organization:
+    address public generalManager;
+    //List of series addresses, this is the main index:
+    address[] public series;
+    //Listing amendments as a legal prose, starting from 0:
+    string[] public prose;
+    //This map makes routing funds to user's latest series easy and fast:
+    mapping (address => address) public latestSeriesForUser;
+    //Series' expiring date is specified here as UNIX timestamp:
+    mapping (address => uint) public expiresAt;
+    //This maps series' name to an address
+    mapping (bytes32 => address) public seriesByName;
+    //This maps series' address to a name
+    mapping (address => bytes32) public seriesByAddress;
+    
+    //Events for external monitoring:
+    event AmendmentAdded (string newAmendment);
+    event FeePaid (address which);
+    event ManagerSet(address newManager);
+    event FactorySet(address newFactory);
+    event DepositMade(address where, uint amount);
+    event SeriesCreated(address addr, uint id);
+    
+    /// @dev This is the initialization function, here we just mark
+    /// ourselves as the General Manager for this series organization.
+    function EtherprisesLLC() {
+        generalManager = msg.sender;
+    }
+    
+    /// @dev This modifier is used to check if the user is the GM.
+    modifier ifGeneralManager {
+        if (msg.sender != generalManager)
+            throw;
+
+        _;
+    }
+    
+    /// @dev This modifier is used to check is the caller a series.
+    modifier ifSeries {
+        if (expiresAt[msg.sender] == 0)
+            throw;
+
+        _;
+    }
+    
+    /// @dev Withdrawal happens here from Etherprises LLC to the GM.
+    /// For bookkeeping and tax reasons we only want GM to withdraw.
+    function withdraw() ifGeneralManager {
+        generalManager.send(this.balance);
+    }
+    
+    /// @dev This checks if the series is expired. This is meant to be
+    /// called inside the series, and terminate the series if expired.
+    /// @param addr Address of the series we want to check
+    /// @return TRUE if series is expired, FALSE otherwise
+    function isExpired(address addr) constant returns (bool) {
+        if (expiresAt[addr] > now)
+            return false;
+        else
+            return true;
+    }
+    
+    /// @dev Amending rules of the organization, only those rules which
+    /// were present upon creation of the Series, apply to the Series.
+    /// @param newAmendment String containing new amendment. Remember to
+    /// prefix it with the date
+    function addAmendment(string newAmendment) ifGeneralManager {
+        // Only GM can amend the rules.
+        // Series obey only the rules which are set when series is created
+        prose.push(newAmendment);
+        
+        AmendmentAdded(newAmendment);
+    }
+    
+    /// @dev This function pays the yearly fee of 1 ETH.
+    /// @return Boolean TRUE, if everything was successful
+    function payFee() ifSeries payable returns (bool) {
+        // Receiving fee of one ETH here
+        if (msg.value != 1 ether)
+            throw;
+            
+        expiresAt[msg.sender] += 1 years;
+        
+        FeePaid(msg.sender);
+        return true;
+    }
+    
+    /// @dev Sets the general manager for the main organization.
+    /// There is just one member for Etherprises LLC, which is the GM.
+    /// @param newManger Address of the new manager
+    function setManager(address newManger) ifGeneralManager {
+        generalManager = newManger;
+        
+        ManagerSet(newManger);
+    }
+    
+    /// @dev This sets the factory proxy contract, which uses the factory.
+    /// @param newFactory Address of the new factory proxy
+    function setFactory(address newFactory) ifGeneralManager {
+        seriesFactory = newFactory;
+        
+        FactorySet(newFactory);
+    }
+    
+    /// @dev This creates a new series, called also from the fallback
+    /// with default values.
+    /// @notice This will create new series. Specify the name here: 
+    /// This is the only place to define a name, the name is immutable.
+    /// Please note, that the name must start with an alpha character
+    /// (despite otherwise being UTF-8).
+    /// Throws an exception if the name does not technically pass the tests.
+    /// @param name Name of the series, must start with A-Z, and for the
+    /// hash table the search key will exclude all other characters
+    /// except A-Z. Full Unicode is supported, though
+    /// @param shares Amount of shares, by default this is immutable
+    /// @param industry Setting industry may have legal implications,
+    /// i.e taxation
+    /// @param symbol Symbol of the traded token
+    /// @return seriesAddress Address of the newly created series contract
+    /// @return seriesId Internal incremental ID number for the series
+    function createSeries(
+        bytes name,
+        uint shares,
+        string industry,
+        string symbol,
+        address extraContract
+    ) payable returns (
+        address seriesAddress,
+        uint seriesId
+    ) {
+        seriesId = series.length;
+        
+        var(latestAddress, latestName) = SeriesFactory(seriesFactory).createSeries.value(msg.value)(seriesId, name, shares, industry, symbol, msg.sender, extraContract);
+        if (latestAddress == 0)
+            throw;
+
+        if (latestName > 0)
+            if (seriesByName[latestName] == 0)
+                seriesByName[latestName] = latestAddress;
+            else
+                throw;
+
+        series.push(latestAddress);
+        expiresAt[latestAddress] = now + 1 years;
+        latestSeriesForUser[msg.sender] = latestAddress;
+        seriesByAddress[latestAddress] = latestName;
+        
+        SeriesCreated(latestAddress, seriesId);
+        return (latestAddress, seriesId);
+    }
+    
+    /// @dev This is here for Registrar ABI support.
+    /// @param _name Name of the series we want to search, please note
+    /// this is only the search key and not full name
+    /// @return Address of the series we want to get
+    function addr(bytes32 _name) constant returns(address o_address) {
+        return seriesByName[_name];
+    }
+    
+    /// @dev This is here for Registrar ABI support: return the search key
+    /// for a contract.
+    /// @param _owner Name of the series we want to search, please note
+    /// this is only the search key and not full name
+    /// @return Name of the series we want to get
+    function name(address _owner) constant returns(bytes32 o_name){
+        return seriesByAddress[_owner];
+    }
+    
+    /// @dev Here the fallback function either creates a new series,
+    /// or transfers funds to existing one.
+    function () payable {
+        if (msg.data.length > 0) {
+            createSeries(msg.data, 0, "", "", 0x0);
+        } else if (latestSeriesForUser[msg.sender] != 0) {
+            //This is important to implement as call so we can forward gas
+            if (latestSeriesForUser[msg.sender].call.value(msg.value)())
+                DepositMade(latestSeriesForUser[msg.sender], msg.value);
+        } else {
+            createSeries("", 0, "", "", 0x0);
+        }
+    }
 }
 
-contract tokenRecipient { 
-  function receiveApproval(address _from, uint256 _value, address _token, bytes _extraData);
-} 
-
-contract IERC20Token {
-
-  /// @return total amount of tokens
-  function totalSupply() constant returns (uint256 totalSupply);
-
-  /// @param _owner The address from which the balance will be retrieved
-  /// @return The balance
-  function balanceOf(address _owner) constant returns (uint256 balance) {}
-
-  /// @notice send `_value` token to `_to` from `msg.sender`
-  /// @param _to The address of the recipient
-  /// @param _value The amount of tokens to be transferred
-  /// @return Whether the transfer was successful or not
-  function transfer(address _to, uint256 _value) returns (bool success) {}
-
-  /// @notice send `_value` token to `_to` from `_from` on the condition it is approved by `_from`
-  /// @param _from The address of the sender
-  /// @param _to The address of the recipient
-  /// @param _value The amount of token to be transferred
-  /// @return Whether the transfer was successful or not
-  function transferFrom(address _from, address _to, uint256 _value) returns (bool success) {}
-
-  /// @notice `msg.sender` approves `_addr` to spend `_value` tokens
-  /// @param _spender The address of the account able to transfer the tokens
-  /// @param _value The amount of wei to be approved for transfer
-  /// @return Whether the approval was successful or not
-  function approve(address _spender, uint256 _value) returns (bool success) {}
-
-  /// @param _owner The address of the account owning tokens
-  /// @param _spender The address of the account able to transfer the tokens
-  /// @return Amount of remaining tokens allowed to spent
-  function allowance(address _owner, address _spender) constant returns (uint256 remaining) {}
-
-  event Transfer(address indexed _from, address indexed _to, uint256 _value);
-  event Approval(address indexed _owner, address indexed _spender, uint256 _value);
-} 
-
-contract SunContractToken is IERC20Token, owned{
-
-  /* Public variables of the token */
-  string public standard = "SunContract token v1.0";
-  string public name = "SunContract";
-  string public symbol = "SNC";
-  uint8 public decimals = 18;
-  address public icoContractAddress;
-  uint256 public tokenFrozenUntilBlock;
-
-  /* Private variables of the token */
-  uint256 supply = 0;
-  mapping (address => uint256) balances;
-  mapping (address => mapping (address => uint256)) allowances;
-  mapping (address => bool) restrictedAddresses;
-
-  /* Events */
-  event Mint(address indexed _to, uint256 _value);
-  event Burn(address indexed _from, uint256 _value);
-  event TokenFrozen(uint256 _frozenUntilBlock, string _reason);
-
-  /* Initializes contract and  sets restricted addresses */
-  function SunContractToken(address _icoAddress) {
-    restrictedAddresses[0x0] = true;
-    restrictedAddresses[_icoAddress] = true;
-    restrictedAddresses[address(this)] = true;
-    icoContractAddress = _icoAddress;
-  }
-
-  /* Returns total supply of issued tokens */
-  function totalSupply() constant returns (uint256 totalSupply) {
-    return supply;
-  }
-
-  /* Returns balance of address */
-  function balanceOf(address _owner) constant returns (uint256 balance) {
-    return balances[_owner];
-  }
-
-  /* Transfers tokens from your address to other */
-  function transfer(address _to, uint256 _value) returns (bool success) {
-    if (block.number < tokenFrozenUntilBlock) throw;    // Throw if token is frozen
-    if (restrictedAddresses[_to]) throw;                // Throw if recipient is restricted address
-    if (balances[msg.sender] < _value) throw;           // Throw if sender has insufficient balance
-    if (balances[_to] + _value < balances[_to]) throw;  // Throw if owerflow detected
-    balances[msg.sender] -= _value;                     // Deduct senders balance
-    balances[_to] += _value;                            // Add recivers blaance 
-    Transfer(msg.sender, _to, _value);                  // Raise Transfer event
-    return true;
-  }
-
-  /* Approve other address to spend tokens on your account */
-  function approve(address _spender, uint256 _value) returns (bool success) {
-    if (block.number < tokenFrozenUntilBlock) throw;    // Throw if token is frozen        
-    allowances[msg.sender][_spender] = _value;          // Set allowance         
-    Approval(msg.sender, _spender, _value);             // Raise Approval event         
-    return true;
-  }
-
-  /* Approve and then communicate the approved contract in a single tx */ 
-  function approveAndCall(address _spender, uint256 _value, bytes _extraData) returns (bool success) {            
-    tokenRecipient spender = tokenRecipient(_spender);              // Cast spender to tokenRecipient contract         
-    approve(_spender, _value);                                      // Set approval to contract for _value         
-    spender.receiveApproval(msg.sender, _value, this, _extraData);  // Raise method on _spender contract         
-    return true;     
-  }     
-
-  /* A contract attempts to get the coins */
-  function transferFrom(address _from, address _to, uint256 _value) returns (bool success) {      
-    if (block.number < tokenFrozenUntilBlock) throw;    // Throw if token is frozen
-    if (restrictedAddresses[_to]) throw;                // Throw if recipient is restricted address  
-    if (balances[_from] < _value) throw;                // Throw if sender does not have enough balance     
-    if (balances[_to] + _value < balances[_to]) throw;  // Throw if overflow detected    
-    if (_value > allowances[_from][msg.sender]) throw;  // Throw if you do not have allowance       
-    balances[_from] -= _value;                          // Deduct senders balance    
-    balances[_to] += _value;                            // Add recipient blaance         
-    allowances[_from][msg.sender] -= _value;            // Deduct allowance for this address         
-    Transfer(_from, _to, _value);                       // Raise Transfer event
-    return true;     
-  }         
-
-  /* Get the amount of allowed tokens to spend */     
-  function allowance(address _owner, address _spender) constant returns (uint256 remaining) {         
-    return allowances[_owner][_spender];
-  }         
-
-  /* Issue new tokens */     
-  function mintTokens(address _to, uint256 _amount) {         
-    if (msg.sender != icoContractAddress) throw;            // Only ICO address can mint tokens        
-    if (restrictedAddresses[_to]) throw;                    // Throw if user wants to send to restricted address       
-    if (balances[_to] + _amount < balances[_to]) throw;     // Check for overflows
-    supply += _amount;                                      // Update total supply
-    balances[_to] += _amount;                               // Set minted coins to target
-    Mint(_to, _amount);                                     // Create Mint event       
-    Transfer(0x0, _to, _amount);                            // Create Transfer event from 0x
-  }     
-  
-  /* Destroy tokens from owners account */
-  function burnTokens(uint256 _amount) onlyOwner {
-    if(balances[msg.sender] < _amount) throw;               // Throw if you do not have enough balance
-    if(supply < _amount) throw;                             // Throw if overflow detected
-
-    supply -= _amount;                                      // Deduct totalSupply
-    balances[msg.sender] -= _amount;                        // Destroy coins on senders wallet
-    Burn(msg.sender, _amount);                              // Raise Burn event
-    Transfer(msg.sender, 0x0, _amount);                     // Raise transfer to 0x0
-  }
-
-  /* Stops all token transfers in case of emergency */
-  function freezeTransfersUntil(uint256 _frozenUntilBlock, string _reason) onlyOwner {      
-    tokenFrozenUntilBlock = _frozenUntilBlock;
-    TokenFrozen(_frozenUntilBlock, _reason);
-  }
-
-  function isRestrictedAddress(address _querryAddress) constant returns (bool answer){
-    return restrictedAddresses[_querryAddress];
-  }
-
-  //
-  /* This part is here only for testing and will not be included into final version */
-  //
-
-  //function changeICOAddress(address _newAddress) onlyOwner{
-  //  icoContractAddress = _newAddress;
-  //  restrictedAddresses[_newAddress] = true;   
-  //}
-
-  //function killContract() onlyOwner{
-  //  selfdestruct(msg.sender);
-  //}
+//This is a placeholder contract: In real life the main contract invokes
+//a proxy, which in turn invokes the actual SeriesFactory
+//The main contract for Etherprises LLC is above this one.
+contract SeriesFactory {
+    address public seriesFactory;
+    address public owner;
+
+    function createSeries (
+        uint seriesId,
+        bytes name,
+        uint shares,
+        string industry,
+        string symbol,
+        address manager,
+        address extraContract
+    ) payable returns (
+        address addr,
+        bytes32 newName
+    ) {
+        address newSeries;
+        bytes32 _newName;
+
+        return (newSeries, _newName);
+    }
 }