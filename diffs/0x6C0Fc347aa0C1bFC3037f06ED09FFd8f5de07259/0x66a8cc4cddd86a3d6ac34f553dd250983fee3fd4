--- 
+++ 
@@ -1,5 +1,4 @@
 pragma solidity ^0.4.4;
-
 /**
  * @title Contract for object that have an owner
  */
@@ -10,10 +9,15 @@
     address public owner;
 
     /**
+     * @dev Store owner on creation
+     */
+    function Owned() { owner = msg.sender; }
+
+    /**
      * @dev Delegate contract to another person
-     * @param _owner New owner address 
-     */
-    function setOwner(address _owner) onlyOwner
+     * @param _owner is another person address
+     */
+    function delegate(address _owner) onlyOwner
     { owner = _owner; }
 
     /**
@@ -22,200 +26,127 @@
     modifier onlyOwner { if (msg.sender != owner) throw; _; }
 }
 
-/**
- * @title Common pattern for destroyable contracts 
- */
-contract Destroyable {
-    address public hammer;
-
-    /**
-     * @dev Hammer setter
-     * @param _hammer New hammer address
-     */
-    function setHammer(address _hammer) onlyHammer
-    { hammer = _hammer; }
-
+
+/**
+ * @title Contract for objects that can be morder
+ */
+contract Mortal is Owned {
     /**
      * @dev Destroy contract and scrub a data
-     * @notice Only hammer can call it 
-     */
-    function destroy() onlyHammer
-    { suicide(msg.sender); }
-
-    /**
-     * @dev Hammer check modifier
-     */
-    modifier onlyHammer { if (msg.sender != hammer) throw; _; }
-}
-
-/**
- * @title Generic owned destroyable contract
- */
-contract Object is Owned, Destroyable {
-    function Object() {
-        owner  = msg.sender;
-        hammer = msg.sender;
-    }
-}
-
-// Standard token interface (ERC 20)
-// https://github.com/ethereum/EIPs/issues/20
-contract ERC20 
-{
-// Functions:
-    /// @return total amount of tokens
-    uint256 public totalSupply;
-
-    /// @param _owner The address from which the balance will be retrieved
-    /// @return The balance
-    function balanceOf(address _owner) constant returns (uint256);
-
-    /// @notice send `_value` token to `_to` from `msg.sender`
-    /// @param _to The address of the recipient
-    /// @param _value The amount of token to be transferred
-    /// @return Whether the transfer was successful or not
-    function transfer(address _to, uint256 _value) returns (bool);
-
-    /// @notice send `_value` token to `_to` from `_from` on the condition it is approved by `_from`
-    /// @param _from The address of the sender
-    /// @param _to The address of the recipient
-    /// @param _value The amount of token to be transferred
-    /// @return Whether the transfer was successful or not
-    function transferFrom(address _from, address _to, uint256 _value) returns (bool);
-
-    /// @notice `msg.sender` approves `_addr` to spend `_value` tokens
-    /// @param _spender The address of the account able to transfer the tokens
-    /// @param _value The amount of wei to be approved for transfer
-    /// @return Whether the approval was successful or not
-    function approve(address _spender, uint256 _value) returns (bool);
-
-    /// @param _owner The address of the account owning tokens
-    /// @param _spender The address of the account able to transfer the tokens
-    /// @return Amount of remaining tokens allowed to spent
-    function allowance(address _owner, address _spender) constant returns (uint256);
-
-// Events:
-    event Transfer(address indexed _from, address indexed _to, uint256 _value);
-    event Approval(address indexed _owner, address indexed _spender, uint256 _value);
-}
-
-/**
- * @title Token contract represents any asset in digital economy
- */
-contract Token is Object, ERC20 {
-    /* Short description of token */
-    string public name;
-    string public symbol;
-
-    /* Total count of tokens exist */
-    uint public totalSupply;
-
-    /* Fixed point position */
-    uint8 public decimals;
+     * @notice Only owner can kill me
+     */
+    function kill() onlyOwner
+    { suicide(owner); }
+}
+
+
+contract Comission is Mortal {
+    address public ledger;
+    bytes32 public taxman;
+    uint    public taxPerc;
+
+    /**
+     * @dev Comission contract constructor
+     * @param _ledger Processing ledger contract
+     * @param _taxman Tax receiver account
+     * @param _taxPerc Processing tax in percent
+     */
+    function Comission(address _ledger, bytes32 _taxman, uint _taxPerc) {
+        ledger  = _ledger;
+        taxman  = _taxman;
+        taxPerc = _taxPerc;
+    }
+
+    /**
+     * @dev Refill ledger with comission
+     * @param _destination Destination account
+     */
+    function process(bytes32 _destination) payable returns (bool) {
+        // Handle value below 100 isn't possible
+        if (msg.value < 100) throw;
+
+        var tax = msg.value * taxPerc / 100; 
+        var refill = bytes4(sha3("refill(bytes32)")); 
+        if ( !ledger.call.value(tax)(refill, taxman)
+          || !ledger.call.value(msg.value - tax)(refill, _destination)
+           ) throw;
+        return true;
+    }
+}
+
+
+contract Invoice is Mortal {
+    address   public signer;
+    uint      public closeBlock;
+
+    Comission public comission;
+    string    public description;
+    bytes32   public beneficiary;
+    uint      public value;
+
+    /**
+     * @dev Offer type contract
+     * @param _comission Comission handler address
+     * @param _description Deal description
+     * @param _beneficiary Beneficiary account
+     * @param _value Deal value
+     */
+    function Invoice(address _comission,
+                     string  _description,
+                     bytes32 _beneficiary,
+                     uint    _value) {
+        comission   = Comission(_comission);
+        description = _description;
+        beneficiary = _beneficiary;
+        value       = _value;
+    }
+
+    /**
+     * @dev Call me to withdraw money
+     */
+    function withdraw() onlyOwner {
+        if (closeBlock != 0) {
+            if (!comission.process.value(value)(beneficiary)) throw;
+        }
+    }
+
+    /**
+     * @dev Payment fallback function
+     */
+    function () payable {
+        // Condition check
+        if (msg.value != value
+           || closeBlock != 0) throw;
+
+        // Store block when closed
+        closeBlock = block.number;
+        signer = msg.sender;
+        PaymentReceived();
+    }
     
-    /* Token approvement system */
-    mapping(address => uint) balances;
-    mapping(address => mapping(address => uint)) allowances;
- 
-    /**
-     * @dev Get balance of plain address
-     * @param _owner is a target address
-     * @return amount of tokens on balance
-     */
-    function balanceOf(address _owner) constant returns (uint256)
-    { return balances[_owner]; }
- 
-    /**
-     * @dev Take allowed tokens
-     * @param _owner The address of the account owning tokens
-     * @param _spender The address of the account able to transfer the tokens
-     * @return Amount of remaining tokens allowed to spent
-     */
-    function allowance(address _owner, address _spender) constant returns (uint256)
-    { return allowances[_owner][_spender]; }
-
-    /* Token constructor */
-    function Token(string _name, string _symbol, uint8 _decimals, uint _count) {
-        name        = _name;
-        symbol      = _symbol;
-        decimals    = _decimals;
-        totalSupply = _count;
-        balances[msg.sender] = _count;
-    }
- 
-    /**
-     * @dev Transfer self tokens to given address
-     * @param _to destination address
-     * @param _value amount of token values to send
-     * @notice `_value` tokens will be sended to `_to`
-     * @return `true` when transfer done
-     */
-    function transfer(address _to, uint _value) returns (bool) {
-        if (balances[msg.sender] >= _value) {
-            balances[msg.sender] -= _value;
-            balances[_to]        += _value;
-            Transfer(msg.sender, _to, _value);
-            return true;
-        }
-        return false;
-    }
-
-    /**
-     * @dev Transfer with approvement mechainsm
-     * @param _from source address, `_value` tokens shold be approved for `sender`
-     * @param _to destination address
-     * @param _value amount of token values to send 
-     * @notice from `_from` will be sended `_value` tokens to `_to`
-     * @return `true` when transfer is done
-     */
-    function transferFrom(address _from, address _to, uint256 _value) returns (bool) {
-        var avail = allowances[_from][msg.sender]
-                  > balances[_from] ? balances[_from]
-                                    : allowances[_from][msg.sender];
-        if (avail >= _value) {
-            allowances[_from][msg.sender] -= _value;
-            balances[_from] -= _value;
-            balances[_to]   += _value;
-            Transfer(_from, _to, _value);
-            return true;
-        }
-        return false;
-    }
-
-    /**
-     * @dev Give to target address ability for self token manipulation without sending
-     * @param _spender target address (future requester)
-     * @param _value amount of token values for approving
-     */
-    function approve(address _spender, uint256 _value) returns (bool) {
-        allowances[msg.sender][_spender] += _value;
-        Approval(msg.sender, _spender, _value);
-        return true;
-    }
-
-    /**
-     * @dev Reset count of tokens approved for given address
-     * @param _spender target address (future requester)
-     */
-    function unapprove(address _spender)
-    { allowances[msg.sender][_spender] = 0; }
-}
-
-library CreatorToken {
-    function create(string _name, string _symbol, uint8 _decimals, uint256 _count) returns (Token)
-    { return new Token(_name, _symbol, _decimals, _count); }
+    /**
+     * @dev Payment notification
+     */
+    event PaymentReceived();
+}
+
+
+library CreatorInvoice {
+    function create(address _comission, string _description, bytes32 _beneficiary, uint256 _value) returns (Invoice)
+    { return new Invoice(_comission, _description, _beneficiary, _value); }
 
     function version() constant returns (string)
-    { return "v0.6.0 (1b4435b8)"; }
+    { return "v0.5.0 (a9ea4c6c)"; }
 
     function abi() constant returns (string)
-    { return '[{"constant":true,"inputs":[],"name":"name","outputs":[{"name":"","type":"string"}],"payable":false,"type":"function"},{"constant":false,"inputs":[{"name":"_spender","type":"address"},{"name":"_value","type":"uint256"}],"name":"approve","outputs":[{"name":"","type":"bool"}],"payable":false,"type":"function"},{"constant":false,"inputs":[{"name":"_owner","type":"address"}],"name":"setOwner","outputs":[],"payable":false,"type":"function"},{"constant":true,"inputs":[],"name":"totalSupply","outputs":[{"name":"","type":"uint256"}],"payable":false,"type":"function"},{"constant":false,"inputs":[{"name":"_from","type":"address"},{"name":"_to","type":"address"},{"name":"_value","type":"uint256"}],"name":"transferFrom","outputs":[{"name":"","type":"bool"}],"payable":false,"type":"function"},{"constant":true,"inputs":[],"name":"decimals","outputs":[{"name":"","type":"uint8"}],"payable":false,"type":"function"},{"constant":true,"inputs":[],"name":"hammer","outputs":[{"name":"","type":"address"}],"payable":false,"type":"function"},{"constant":true,"inputs":[{"name":"_owner","type":"address"}],"name":"balanceOf","outputs":[{"name":"","type":"uint256"}],"payable":false,"type":"function"},{"constant":false,"inputs":[],"name":"destroy","outputs":[],"payable":false,"type":"function"},{"constant":true,"inputs":[],"name":"owner","outputs":[{"name":"","type":"address"}],"payable":false,"type":"function"},{"constant":true,"inputs":[],"name":"symbol","outputs":[{"name":"","type":"string"}],"payable":false,"type":"function"},{"constant":false,"inputs":[{"name":"_to","type":"address"},{"name":"_value","type":"uint256"}],"name":"transfer","outputs":[{"name":"","type":"bool"}],"payable":false,"type":"function"},{"constant":false,"inputs":[{"name":"_hammer","type":"address"}],"name":"setHammer","outputs":[],"payable":false,"type":"function"},{"constant":true,"inputs":[{"name":"_owner","type":"address"},{"name":"_spender","type":"address"}],"name":"allowance","outputs":[{"name":"","type":"uint256"}],"payable":false,"type":"function"},{"constant":false,"inputs":[{"name":"_spender","type":"address"}],"name":"unapprove","outputs":[],"payable":false,"type":"function"},{"inputs":[{"name":"_name","type":"string"},{"name":"_symbol","type":"string"},{"name":"_decimals","type":"uint8"},{"name":"_count","type":"uint256"}],"type":"constructor"},{"anonymous":false,"inputs":[{"indexed":true,"name":"_from","type":"address"},{"indexed":true,"name":"_to","type":"address"},{"indexed":false,"name":"_value","type":"uint256"}],"name":"Transfer","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"name":"_owner","type":"address"},{"indexed":true,"name":"_spender","type":"address"},{"indexed":false,"name":"_value","type":"uint256"}],"name":"Approval","type":"event"}]'; }
-}
+    { return '[{"constant":true,"inputs":[],"name":"signer","outputs":[{"name":"","type":"address"}],"payable":false,"type":"function"},{"constant":true,"inputs":[],"name":"beneficiary","outputs":[{"name":"","type":"bytes32"}],"payable":false,"type":"function"},{"constant":true,"inputs":[],"name":"comission","outputs":[{"name":"","type":"address"}],"payable":false,"type":"function"},{"constant":false,"inputs":[],"name":"withdraw","outputs":[],"payable":false,"type":"function"},{"constant":true,"inputs":[],"name":"value","outputs":[{"name":"","type":"uint256"}],"payable":false,"type":"function"},{"constant":false,"inputs":[],"name":"kill","outputs":[],"payable":false,"type":"function"},{"constant":false,"inputs":[{"name":"_owner","type":"address"}],"name":"delegate","outputs":[],"payable":false,"type":"function"},{"constant":true,"inputs":[],"name":"description","outputs":[{"name":"","type":"string"}],"payable":false,"type":"function"},{"constant":true,"inputs":[],"name":"closeBlock","outputs":[{"name":"","type":"uint256"}],"payable":false,"type":"function"},{"constant":true,"inputs":[],"name":"owner","outputs":[{"name":"","type":"address"}],"payable":false,"type":"function"},{"inputs":[{"name":"_comission","type":"address"},{"name":"_description","type":"string"},{"name":"_beneficiary","type":"bytes32"},{"name":"_value","type":"uint256"}],"type":"constructor"},{"payable":true,"type":"fallback"},{"anonymous":false,"inputs":[],"name":"PaymentReceived","type":"event"}]'; }
+}
+
 
 /**
  * @title Builder based contract
  */
-contract Builder is Object {
+contract Builder is Mortal {
     /**
      * @dev this event emitted for every builded contract
      */
@@ -265,19 +196,19 @@
 }
 
 //
-// AIRA Builder for Token contract
+// AIRA Builder for Invoice contract
 //
-contract BuilderToken is Builder {
+/**
+ * @title BuilderInvoice contract
+ */
+contract BuilderInvoice is Builder {
     /**
      * @dev Run script creation contract
-     * @param _name is name token
-     * @param _symbol is symbol token
-     * @param _decimals is fixed point position
-     * @param _count is count of tokens exist
-     * @param _client is a contract destination address (zero for sender)
      * @return address new contract
      */
-    function create(string _name, string _symbol, uint8 _decimals, uint256 _count, address _client) payable returns (address) {
+    function create(address _comission, string _description,
+                    bytes32 _beneficiary, uint _value,
+                    address _client) payable returns (address) {
         if (buildingCostWei > 0 && beneficiary != 0) {
             // Too low value
             if (msg.value < buildingCostWei) throw;
@@ -297,12 +228,10 @@
         if (_client == 0)
             _client = msg.sender;
  
-        var inst = CreatorToken.create(_name, _symbol, _decimals, _count);
+        var inst = CreatorInvoice.create(_comission, _description, _beneficiary, _value);
+        inst.delegate(_client);
+        Builded(_client, inst);
         getContractsOf[_client].push(inst);
-        Builded(_client, inst);
-        inst.transfer(_client, _count);
-        inst.setOwner(_client);
-        inst.setHammer(_client);
         return inst;
     }
 }