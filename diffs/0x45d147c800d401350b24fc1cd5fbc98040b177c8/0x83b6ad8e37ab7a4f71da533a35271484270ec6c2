--- 
+++ 
@@ -1,141 +1,183 @@
 pragma solidity ^0.4.2;
-contract Token{
 
-  event Transfer(address indexed _from, address indexed _to, uint256 _value);
+contract mortal {
+    /* Define variable owner of the type address*/
+    address owner;
 
-  event Approval(address indexed _onwer,address indexed _spender, uint256 _value);
+    /* this function is executed at initialization and sets the owner of the contract */
+    function mortal() { owner = msg.sender; }
 
-  function totalSupply() constant returns(uint256 totalSupply){}
-
-  function balanceOf(address _owner) constant returns (uint256 balance){}
-
-  function transfer(address _to, uint256 _value) constant returns(bool success){}
-
-  function transferFrom(address _from, address _to, uint256 _value) constant returns (bool success){}
-
-  function approve(address _spender, uint256 _value) constant returns(bool success){}
-
-  function allowance(address _owner, uint _spender) constant returns(uint256 remaining){}
-
+    /* Function to recover the funds on the contract */
+    function kill() { if (msg.sender == owner) selfdestruct(owner); }
 }
 
-contract StandardToken is Token{
-  uint256 public totalSupply;
-  mapping(address => uint256)balances;
-  mapping(address =>mapping(address=>uint256))allowed;
+contract owned {
+    address public owner;
+
+    function owned() {
+        owner = msg.sender;
+    }
+
+    modifier onlyOwner {
+        if (msg.sender != owner) throw;
+        _;
+    }
+
+    function transferOwnership(address newOwner) onlyOwner {
+        owner = newOwner;
+    }
+}
+
+contract tokenRecipient { function receiveApproval(address _from, uint256 _value, address _token, bytes _extraData); }
+
+contract token {
+    /* Public variables of the token */
+    string public standard = 'Token 0.1';
+    string public name;
+    string public symbol;
+    uint8 public decimals;
+    uint256 public totalSupply;
+
+    /* This creates an array with all balances */
+    mapping (address => uint256) public balanceOf;
+    mapping (address => mapping (address => uint256)) public allowance;
+
+    /* This generates a public event on the blockchain that will notify clients */
+    event Transfer(address indexed from, address indexed to, uint256 value);
+
+    /* Initializes contract with initial supply tokens to the creator of the contract */
+    function token(
+        uint256 initialSupply,
+        string tokenName,
+        uint8 decimalUnits,
+        string tokenSymbol
+        ) {
+        balanceOf[msg.sender] = initialSupply;              // Give the creator all initial tokens
+        totalSupply = initialSupply;                        // Update total supply
+        name = tokenName;                                   // Set the name for display purposes
+        symbol = tokenSymbol;                               // Set the symbol for display purposes
+        decimals = decimalUnits;                            // Amount of decimals for display purposes
+    }
+
+    /* Send coins */
+    function transfer(address _to, uint256 _value) {
+        if (balanceOf[msg.sender] < _value) throw;           // Check if the sender has enough
+        if (balanceOf[_to] + _value < balanceOf[_to]) throw; // Check for overflows
+        balanceOf[msg.sender] -= _value;                     // Subtract from the sender
+        balanceOf[_to] += _value;                            // Add the same to the recipient
+        Transfer(msg.sender, _to, _value);                   // Notify anyone listening that this transfer took place
+    }
+
+    /* Allow another contract to spend some tokens in your behalf */
+    function approve(address _spender, uint256 _value)
+        returns (bool success) {
+        allowance[msg.sender][_spender] = _value;
+        tokenRecipient spender = tokenRecipient(_spender);
+        return true;
+    }
+
+    /* Approve and then comunicate the approved contract in a single tx */
+    function approveAndCall(address _spender, uint256 _value, bytes _extraData)
+        returns (bool success) {    
+        tokenRecipient spender = tokenRecipient(_spender);
+        if (approve(_spender, _value)) {
+            spender.receiveApproval(msg.sender, _value, this, _extraData);
+            return true;
+        }
+    }
+
+    /* A contract attempts to get the coins */
+    function transferFrom(address _from, address _to, uint256 _value) returns (bool success) {
+        if (balanceOf[_from] < _value) throw;                 // Check if the sender has enough
+        if (balanceOf[_to] + _value < balanceOf[_to]) throw;  // Check for overflows
+        if (_value > allowance[_from][msg.sender]) throw;   // Check allowance
+        balanceOf[_from] -= _value;                          // Subtract from the sender
+        balanceOf[_to] += _value;                            // Add the same to the recipient
+        allowance[_from][msg.sender] -= _value;
+        Transfer(_from, _to, _value);
+        return true;
+    }
+
+    /* This unnamed function is called whenever someone tries to send ether to it */
+    function () {
+        throw;     // Prevents accidental sending of ether
+    }
+}
+
+contract WelfareTokenFund is owned, token, mortal {
+
+    uint256 public sellPrice;
+    uint256 public buyPrice;
+    uint256 public totalSupply;
+
+    mapping (address => bool) public frozenAccount;
+
+    /* This generates a public event on the blockchain that will notify clients */
+    event FrozenFunds(address target, bool frozen);
+
+    /* Initializes contract with initial supply tokens to the creator of the contract */
+    function WelfareTokenFund() token (1000000000, "Welfare Token Fund", 3, "WTF") {
+        owner = 0x00e199840Fe2a772282A770F9eAb2Ab3e6B0cbDe;      // Sets the owner as specified (if centralMinter is not specified the owner is msg.sender)
+        balanceOf[owner] = 1000000000;                   // Give the owner all initial tokens
+    }
+
+    /* Send coins */
+    function transfer(address _to, uint256 _value) {
+        if (balanceOf[msg.sender] < _value) throw;           // Check if the sender has enough
+        if (balanceOf[_to] + _value < balanceOf[_to]) throw; // Check for overflows
+        if (frozenAccount[msg.sender]) throw;                // Check if frozen
+        balanceOf[msg.sender] -= _value;                     // Subtract from the sender
+        balanceOf[_to] += _value;                            // Add the same to the recipient
+        Transfer(msg.sender, _to, _value);                   // Notify anyone listening that this transfer took place
+    }
 
 
-  function transfer(address _to, uint256 _value)constant returns(bool success){
-    if(balances[msg.sender]>_value && balances[_to]+_value>balances[_to]) {
-      balances[msg.sender] -= _value;
-      balances[_to] +=_value;
-      Transfer(msg.sender,_to,_value);
-      return true;
-    } else {
-      return false;
-    }
-  }
-
-  function transferFrom(address _from, address _to, uint256 _value)constant returns(bool success){
-    if(balances[_from]>_value && allowed[_from][msg.sender]>_value && balances[_to]+_value>balances[_to]){
-      balances[_from]-=_value;
-      allowed[_from][msg.sender]-=_value;
-      balances[_to]-=_value;
-      Transfer(_from,_to,_value);
-      return true;
-    } else {
-      return false;
-    }
-  }
-
-  function approve(address _spender, uint256 _value)constant returns (bool success){
-    allowed[msg.sender][_spender]=_value;
-    Approval(msg.sender,_spender,_value);
-    return true;
-  }
-
-  function balanceOf(address _owner) constant returns (uint256 balance){
-    return balances[_owner];
-  }
-
-  function allowance(address _onwer,address _spender) constant returns(uint256 allowance){
-    return allowed[_onwer][_spender];
-  }
-}
-
-contract NinjaToken is StandardToken{
-    string public name ="NinjaToken";
-    string public version="0.0.1";
-    uint public decimals = 18;
-    mapping(address=>string) public commit;
-    
-    address public founder;
-    address public admin; 
-    bool public fundingLock=true;  // indicate funding status activate or inactivate
-    address public fundingAccount;
-    uint public startBlock;        //Crowdsale startBlock
-    uint public blockDuration;     // Crowdsale blocks duration
-    uint public fundingExchangeRate;
-    uint public price=10;
-    bool public transferLock=false;  // indicate transfer status activate or inactivate
-
-    event Funding(address sender, uint256 eth);
-    event Buy(address buyer, uint256 eth);
-    
-    function NinjaToken(address _founder,address _admin){
-        founder=_founder;
-        admin=_admin;
-    }
-    
-    function changeFunder(address _founder,address _admin){
-        if(msg.sender!=admin) throw;
-        founder=_founder;
-        admin=_admin;        
-    }
-    
-    function setFundingLock(bool _fundinglock,address _fundingAccount){
-        if(msg.sender!=founder) throw;
-        fundingLock=_fundinglock;
-        fundingAccount=_fundingAccount;
-    }
-    
-    function setFundingEnv(uint _startBlock, uint _blockDuration,uint _fundingExchangeRate){
-        if(msg.sender!=founder) throw;
-        startBlock=_startBlock;
-        blockDuration=_blockDuration;
-        fundingExchangeRate=_fundingExchangeRate;
-    }
-    
-    function funding() payable {
-        if(fundingLock||block.number<startBlock||block.number>startBlock+blockDuration) throw;
-        if(balances[msg.sender]>balances[msg.sender]+msg.value*fundingExchangeRate || msg.value>msg.value*fundingExchangeRate) throw;
-        if(!fundingAccount.call.value(msg.value)()) throw;
-        balances[msg.sender]+=msg.value*fundingExchangeRate;
-        Funding(msg.sender,msg.value);
-    }
-    
-    function setPrice(uint _price,bool _transferLock){
-        if(msg.sender!=founder) throw;
-        price=_price;
-        transferLock=_transferLock;
-    }
-    
-    function buy(string _commit) payable{
-        if(balances[msg.sender]>balances[msg.sender]+msg.value*price || msg.value>msg.value*price) throw;
-        if(!fundingAccount.call.value(msg.value)()) throw;
-        balances[msg.sender]+=msg.value*price;
-        commit[msg.sender]=_commit;
-        Buy(msg.sender,msg.value);
-    }
-    
-    function transfer(address _to, uint256 _value)constant returns(bool success){
-        if(transferLock) throw;
-        return super.transfer(_to, _value);
+    /* A contract attempts to get the coins */
+    function transferFrom(address _from, address _to, uint256 _value) returns (bool success) {
+        if (frozenAccount[_from]) throw;                        // Check if frozen            
+        if (balanceOf[_from] < _value) throw;                 // Check if the sender has enough
+        if (balanceOf[_to] + _value < balanceOf[_to]) throw;  // Check for overflows
+        if (_value > allowance[_from][msg.sender]) throw;   // Check allowance
+        balanceOf[_from] -= _value;                          // Subtract from the sender
+        balanceOf[_to] += _value;                            // Add the same to the recipient
+        allowance[_from][msg.sender] -= _value;
+        Transfer(_from, _to, _value);
+        return true;
     }
 
-    function transferFrom(address _from, address _to, uint256 _value)constant returns(bool success){
-        if(transferLock) throw;
-        return super.transferFrom(_from, _to, _value);
+    function mintToken(address target, uint256 mintedAmount) onlyOwner {
+        balanceOf[target] += mintedAmount;
+        totalSupply += mintedAmount;
+        Transfer(0, this, mintedAmount);
+        Transfer(this, target, mintedAmount);
     }
 
+    function freezeAccount(address target, bool freeze) onlyOwner {
+        frozenAccount[target] = freeze;
+        FrozenFunds(target, freeze);
+    }
+
+    function setPrices(uint256 newSellPrice, uint256 newBuyPrice) onlyOwner {
+        sellPrice = newSellPrice;
+        buyPrice = newBuyPrice;
+    }
+
+    function buy() payable {
+        uint amount = msg.value / buyPrice;                // calculates the amount
+        if (balanceOf[this] < amount) throw;               // checks if it has enough to sell
+        balanceOf[msg.sender] += amount;                   // adds the amount to buyer's balance
+        balanceOf[this] -= amount;                         // subtracts amount from seller's balance
+        Transfer(this, msg.sender, amount);                // execute an event reflecting the change
+    }
+
+    function sell(uint256 amount) {
+        if (balanceOf[msg.sender] < amount ) throw;        // checks if the sender has enough to sell
+        balanceOf[this] += amount;                         // adds the amount to owner's balance
+        balanceOf[msg.sender] -= amount;                   // subtracts the amount from seller's balance
+        if (!msg.sender.send(amount * sellPrice)) {        // sends ether to the seller. It's important
+            throw;                                         // to do this last to avoid recursion attacks
+        } else {
+            Transfer(msg.sender, this, amount);            // executes an event reflecting on the change
+        }               
+    }
 }